<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github/gitee+hexo搭建博客</title>
    <url>/2022/05/06/github%E6%88%96gitee-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<center>人生天地间，忽如远行客</center>
</blockquote>
<p><escape><span id="more"></span></escape></p>
<h2 id="1-工具"><a href="#1-工具" class="headerlink" title="1. 工具"></a>1. 工具</h2><ul>
<li>github账号</li>
</ul>
<blockquote>
<p><a href="https://github.com/">注册github账号</a></p>
</blockquote>
<ul>
<li>node.js</li>
</ul>
<blockquote>
<p>让js能作为服务端脚本语言 </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测 node版本尽量高点，不高先升级nodejs版本，我的是v16.15.0，windows建议直接下载安装包覆盖安装地址</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment"># windows查询node安装地址</span></span><br><span class="line"><span class="built_in">where</span> node</span><br><span class="line"><span class="comment"># 清除npm缓存【Linux】</span></span><br><span class="line">npm cache clean -f</span><br><span class="line"><span class="comment"># 全局安装n【Linux】</span></span><br><span class="line">npm install -g n</span><br><span class="line"><span class="comment"># 升级到最新稳定版</span></span><br><span class="line">$ n stable</span><br><span class="line"><span class="comment"># 升级到最新版</span></span><br><span class="line">$ n latest</span><br><span class="line"><span class="comment"># 升级到定制版</span></span><br><span class="line">$ n v14.6.0</span><br><span class="line"><span class="comment"># 切换使用版本</span></span><br><span class="line">$ n 13.10.0 (ENTER)</span><br><span class="line"><span class="comment"># 删除制定版本</span></span><br><span class="line">$ n <span class="built_in">rm</span> 13.10.0</span><br><span class="line"><span class="comment"># 用制定的版本执行脚本</span></span><br><span class="line">$ n use 13.10.0 some.js</span><br></pre></td></tr></table></figure>

<ul>
<li>npm</li>
</ul>
<blockquote>
<p>非官方的NodeJS包管理和分发工具</p>
</blockquote>
<p><a href="https://nodejs.org/zh-cn/download/releases/">nodejs对应npm版本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">npm -v</span><br><span class="line">cnpm -v</span><br><span class="line"><span class="comment"># 升级到指定版本</span></span><br><span class="line">npm install -g npm@8.5.5</span><br></pre></td></tr></table></figure>

<ul>
<li>git</li>
</ul>
<blockquote>
<p>分布式版本控制</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测</span></span><br><span class="line">git --version</span><br><span class="line"><span class="comment"># 配置用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;github 注册邮箱&quot;</span></span><br><span class="line"><span class="comment"># 生成SSH密钥，免于登录，进行比较，四次回车</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github 注册邮箱&quot;</span></span><br><span class="line"><span class="comment"># 测试是否成功</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<ul>
<li>hexo</li>
</ul>
<blockquote>
<p>一个快速、简洁且高效的博客框架，默认端口4000</p>
</blockquote>
<p><a href="https://hexo.io/zh-cn/docs/">hexo文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm i hexo-cli -g</span><br><span class="line"><span class="comment"># 是否成功，出现版本号</span></span><br><span class="line">hexo -v</span><br><span class="line"><span class="comment"># 进入创建的文件夹初始化</span></span><br><span class="line">hexo init .</span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 本地测试</span></span><br><span class="line"><span class="comment"># 新建博客</span></span><br><span class="line">hexo new <span class="string">&quot;博客名&quot;</span></span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 打开本地服务器</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 输入localhost:4000</span></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="2-搭建个人仓库"><a href="#2-搭建个人仓库" class="headerlink" title="2. 搭建个人仓库"></a>2. 搭建个人仓库</h2><ul>
<li>名字要和登录名相同【特别注意】</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>

<ul>
<li>是公开的</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">public</span><br></pre></td></tr></table></figure>

<ul>
<li>将博客目录下的_config.yml，加入deploy设置为个人仓库名</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你的地址</span></span><br><span class="line">  <span class="comment"># github更新后为main，不能是master，gitee是master</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装hexo-deployer-git自动化部署发布工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ul>
<li>令牌</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">开发者设置 Developer settings </span><br><span class="line">个人访问令牌 Personal access tokens</span><br></pre></td></tr></table></figure>

<ul>
<li>发布博客</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除已生成文件及缓存</span></span><br><span class="line">hexo clean </span><br><span class="line"><span class="comment"># hexo 新建，简写为hexo n</span></span><br><span class="line">hexo new <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 生成静态页面，简写做hexo g</span></span><br><span class="line">hexo generate </span><br><span class="line"><span class="comment">#推送到github库，简写做hexo d</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">你的用户名</span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">令牌密码</span><br></pre></td></tr></table></figure>

<ul>
<li><p>gitee</p>
</li>
<li><p>gitee pages需要实名</p>
</li>
<li><p>公开且仓库名要是用户名，不需要是 <strong>用户名.gitee.io</strong></p>
</li>
<li><p>确定公钥，私人令牌</p>
</li>
<li><p>部署到gitee，需要你每次推送后，去更新一下，如果想要自动更新，就需要开通 Gitee 的会员。</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxy8/xxy8.github.io.git</span></span><br><span class="line">  		<span class="string">https://gitee.com/xxy8/xxy8.git,master</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<h2 id="3-美化博客"><a href="#3-美化博客" class="headerlink" title="3. 美化博客"></a>3. 美化博客</h2><blockquote>
<p>美化博客根据自己风格来定，我比较喜欢next风格</p>
</blockquote>
<ul>
<li>下载next，我用的是稳定版5.1.4</li>
</ul>
<p><a href="https://github.com/iissnan/hexo-theme-next.git">next</a></p>
<ul>
<li>将next复制到博客根目录的themes文件下</li>
<li>修改博客主配置文件_config.yml文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li>报错</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_macro/post.swig&#x27; as post_template %&#125; &#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125; &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125; &#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class="line">&#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125;</span><br><span class="line">&#123;% include &#x27;_partials/pagination.swig&#x27; %&#125; &#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(false) &#125;&#125; &#123;% endblock %&#125; </span><br></pre></td></tr></table></figure>

<ul>
<li>解决方案 没有hexo-renderer-swig模块</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里可能需要等待，会出现为一片空白的情况，因为github速度限制</p>
</blockquote>
<ul>
<li>主配置的_config.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xxy</span></span><br><span class="line"><span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;一笑之语&#x27;</span></span><br><span class="line"><span class="comment"># 网站描述 用于SEO</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;镜中花，水中月，无至无&#x27;</span></span><br><span class="line"><span class="comment"># 网站的关键词。支持多个关键词。</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">xxy</span></span><br><span class="line"><span class="comment"># 您的名字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xxy</span></span><br><span class="line"><span class="comment"># 网站使用的语言，常见的有 zh-Hans和 zh-CN,建议zh-Hans</span></span><br><span class="line"><span class="comment"># language: en</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="comment"># 网站时区</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="comment"># url: http://example.com</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://xxy8.github.io</span></span><br><span class="line"><span class="comment"># 文章的 永久链接 格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># 永久链接中各部分的默认值</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># 改写 permalink 的值来美化 URL</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line"><span class="comment"># 是否在永久链接中保留尾部的index.html</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line"><span class="comment"># 是否在永久链接中保留尾部的 .html, 设置为 false 时去除，对尾部的 index.html无效</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory 如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</span></span><br><span class="line"><span class="comment"># 资源文件夹</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="comment"># 公共文件夹</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="comment"># 归档文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="comment"># 分类文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="comment"># Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="comment"># 国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="comment"># 跳过指定文件的渲染</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="comment"># 新文章的文件名称</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="comment"># 预设布局</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="comment"># 把标题转换为 title case</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="comment"># 在新标签中打开链接</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line"><span class="comment"># 在新标签中打开链接</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="comment"># 对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="comment"># 需要排除的域名。主域名和子域名如 www 需分别配置</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 显示草稿</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 把链接改为与根目录的相对位址,通常情况下，建议使用绝对地址。</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 显示未来的文章</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 代码块的设置</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 代码块的设置</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="comment"># 默认分类</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="comment"># 标签别名</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="comment"># 时间格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="comment"># 当 Front Matter 中没有指定 updated 时 updated 的取值</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="comment"># 每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 分页目录</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="comment"># include 和 exclude 选项只会应用到 source/ ，而 ignore 选项会应用到所有文件夹.</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="comment"># 当前主题名称。值为false时禁用主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxy8/xxy8.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>主题配置文件next 中的_config.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line"><span class="comment"># 设置导航栏菜单</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes 主题风格，根据自己喜欢的来</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<ul>
<li>版权信息声明</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># http://creativecommons.org/</span></span><br><span class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment">#creative_commons: by-nc-sa</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh_CN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>展示侧边栏</li>
</ul>
<blockquote>
<p>侧边栏还受动画影响motion. enable为false时，侧边栏不显示，影响版本5.0.0及其以下</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position, available value: left | right (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display, available value (only for Muse | Mist):</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  Totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="comment">#display: post</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">always</span></span><br><span class="line">  <span class="comment">#display: hide</span></span><br><span class="line">  <span class="comment">#display: remove</span></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏头像</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="comment">#头像图片地址</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/tx.jpg</span>  </span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.圆形选true 方形选false</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.魔性转动，打开选true</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏外链</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">地址</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">地址</span> <span class="string">||</span> <span class="string">CSDN</span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>友情链接</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#links:</span></span><br><span class="line">  <span class="comment">#Title: http://example.com/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打赏功能</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="comment">#enable: true</span></span><br><span class="line">  <span class="comment">#animation: false</span></span><br><span class="line">  <span class="comment">#comment: Q：阅读本文需要付费，你是否愿意？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回顶部</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>关闭动画</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">transition:</span></span><br><span class="line">  <span class="comment"># Transition variants:</span></span><br><span class="line">  <span class="comment"># fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut</span></span><br><span class="line">  <span class="comment"># swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut</span></span><br><span class="line">  <span class="comment"># bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut</span></span><br><span class="line">  <span class="comment"># slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut</span></span><br><span class="line">  <span class="comment"># slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut</span></span><br><span class="line">  <span class="comment"># perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut</span></span><br><span class="line">  <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">  <span class="attr">post_header:</span> <span class="string">slideDownIn</span></span><br><span class="line">  <span class="attr">post_body:</span> <span class="string">slideDownIn</span></span><br><span class="line">  <span class="attr">coll_header:</span> <span class="string">slideLeftIn</span></span><br><span class="line">  <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">slideUpIn</span></span><br></pre></td></tr></table></figure>

<ul>
<li>网站图标设置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>底部页脚</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2015</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">user</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">xxy</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>文章设置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="comment"># 自动摘录描述在主页作为序言文本</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="comment">#enable: false</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br><span class="line">  <span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="comment"># 是否显示每项的文字</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否显示发表时间</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否显示更新时间</span></span><br><span class="line">  <span class="attr">updated_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否显示分类</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>好看的画布</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标签</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">工具</span></span><br></pre></td></tr></table></figure>

<ul>
<li>预览效果摘要</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">escape</span>&gt;</span></span>&lt;!-- more --&gt;<span class="language-xml"><span class="tag">&lt;/<span class="name">escape</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>增加模块zh-Hans.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益404</span></span><br><span class="line">  <span class="attr">shuyu:</span> <span class="string">书宇</span></span><br></pre></td></tr></table></figure>

<ul>
<li>主站配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="comment"># 书宇文件夹</span></span><br><span class="line"><span class="attr">shuyu_dir:</span> <span class="string">shuyu</span></span><br></pre></td></tr></table></figure>

<ul>
<li>主题配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/||tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/||fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/||user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line">  <span class="attr">shuyu:</span> <span class="string">/shuyu/||book</span></span><br></pre></td></tr></table></figure>

<ul>
<li>增加文件夹</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n page shuyu</span><br></pre></td></tr></table></figure>

<ul>
<li>文章加密</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# 文章加密 #&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">            if (prompt(&#x27;请输入文章密码&#x27;) !== &#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">                alert(&#x27;密码错误！&#x27;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>markdown文件</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2022/4/13 20:46:25</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Diary</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> Testing</span><br><span class="line"><span class="bullet">  -</span> Another Tag</span><br><span class="line"><span class="section">password: 你的密码</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<ul>
<li>图片下面的日志链接bug，在<code>\themes\next\layout\_macro\sidebar.swig</code>中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;#   &lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;&gt;   #&#125;</span><br><span class="line">                改为</span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(config.archive_dir) | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>底部分页左右标签bug，在<code>\themes\next\layout\_partials\pagination.swig</code>中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class=&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#x27;&lt;i class=&quot;fa fa-angle-left&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">        next_text: &#x27;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class=&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#x27;&lt;i class=&quot;fa fa-hand-o-left&quot; aria-label=&quot;&#x27; + __(&#x27;accessibility.prev_page&#x27;) + &#x27;&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">        next_text: &#x27;&lt;i class=&quot;fa fa-hand-o-right&quot; aria-label=&quot;&#x27; + __(&#x27;accessibility.next_page&#x27;) + &#x27;&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">        mid_size: 1,</span><br><span class="line">		escape   : false</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>点击目录不跳转bug，在next里的js文件post-details.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.post-toc a&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">var</span> targetSelector = <span class="title class_">NexT</span>.<span class="property">utils</span>.escapeSelector(<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">&lt;!-- 添加下面这行代码, 重新解析 <span class="variable constant_">URL</span> -&gt;</span><br><span class="line">  targetSelector = <span class="built_in">decodeURI</span>(<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">  <span class="keyword">var</span> offset = $(targetSelector).<span class="title function_">offset</span>().<span class="property">top</span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-小工具"><a href="#4-小工具" class="headerlink" title="4. 小工具"></a>4. 小工具</h2><ul>
<li>本地搜索</li>
<li>主题配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="comment"># 选auto则搜索时输入自动出现结果，选manual则搜索时输入完成需手动点击回车或搜索按钮出结果</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="comment"># 显示每篇文章的top n个结果，通过设置为-1显示所有结果</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在根目录下使用以下命令安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ul>
<li>站点配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>网站底部字数统计</p>
</li>
<li><p>安装插件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>

<ul>
<li>然后在 &#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.njk 的合适的地方写入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>实现字数统计和阅读需要时长显示</p>
</li>
<li><p>安装插件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<ul>
<li>在主配置文件的 _config.yml 下写入</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>

<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.  总结"></a>5.  总结</h2><p>在本次搭建博客中，对github pages能作为微服务器有了了解，也对自己的博客有了大致框架，遵循简洁实用的原则。</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>简洁好用软件和网址</title>
    <url>/2022/05/09/%E7%AE%80%E6%B4%81%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<blockquote>
<center>弱小和无知不是问题，傲慢才是</center>
</blockquote>
<p><escape><span id="more"></span></escape></p>
<blockquote>
<p><strong>第一次更新日期：2021-03-13  星期六</strong></p>
<p><strong>第二次更新日期：2021-09-30  星期四</strong></p>
</blockquote>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><blockquote>
<ol>
<li>Linux操作系统&#x2F;<a href="http://www.xitongzhijia.net/linux/">点击跳转Linux</a></li>
<li>UNIX操作系统&#x2F;<a href="https://www.jb51.net/softs/list516_1.html/">点击跳转UNIX</a></li>
<li>Windows操作系统&#x2F;<a href="https://windows.dqsspx.top/">点击跳转Windows</a></li>
<li>Mac操作系统&#x2F; <a href="https://www.apple.com.cn/cn/search/Mac+OS+X+10.8+Mountain+Lion/">点击跳转Mac</a></li>
</ol>
</blockquote>
<h3 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h3><blockquote>
<ol>
<li>(卸载)Revo Uninstaller&#x2F;<a href="https://revouninstaller.pro/">点击跳转Revo Uninstaller</a></li>
<li>(压缩)7-zip&#x2F;<a href="https://www.7-zip.org/">点击跳转7-zip</a></li>
<li>(压缩)Bandzip&#x2F;<a href="http://www.bandisoft.com/">点击跳转bandzip</a></li>
<li>（分类）Rolan&#x2F;<a href="https://getrolan.com/">点击跳转rolan</a></li>
<li>分区助手&#x2F;<a href="https://www.disktool.cn/">点击跳转分区助手</a></li>
<li>(快捷键)CheatSheet<a href="https://cheatsheet-mac.en.softonic.com/mac">点击跳转CheatSheet</a></li>
<li>(下载器)IDM&#x2F;<a href="http://www.internetdownloadmanager.com/">点击跳转IDM</a></li>
<li>VM虚拟软件机&#x2F;<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">点击跳转虚拟软件机</a></li>
<li>阿里云Linux镜像&#x2F;<a href="http://mirrors.aliyun.com/centos/">点击跳转阿里云Linux镜像</a></li>
</ol>
</blockquote>
<h3 id="网络软件"><a href="#网络软件" class="headerlink" title="网络软件"></a>网络软件</h3><blockquote>
<ol>
<li>Chrome&#x2F;<a href="https://www.google.cn/chrome/">点击跳转chrome</a></li>
<li>火狐&#x2F;<a href="http://www.firefox.com.cn/">点击跳转火狐</a></li>
<li>WiFi&#x2F; <a href="https://jingyan.baidu.com/article/5d368d1e28e2697f60c0578c.html">点击跳转WIFI</a></li>
<li>Xshell&#x2F;<a href="https://xshell.en.softonic.com/">点击跳转Xshell</a></li>
</ol>
</blockquote>
<h3 id="安全软件"><a href="#安全软件" class="headerlink" title="安全软件"></a>安全软件</h3><blockquote>
<ol>
<li>火绒安全&#x2F;<a href="https://www.huorong.cn/">点击跳转火绒</a></li>
</ol>
</blockquote>
<h3 id="图像编辑"><a href="#图像编辑" class="headerlink" title="图像编辑"></a>图像编辑</h3><blockquote>
<ol>
<li>PhotoShop&#x2F;<a href="http://p2.czjswl.cn/index.php?m=goods&a=details&content_id=9#">点击跳转PhotoShop</a></li>
<li>FSCapturePortable&#x2F;<a href="https://faststone-capture.en.softonic.com/">点击跳转FSCapturePortable</a></li>
<li>格式工厂&#x2F;<a href="http://www.pcgeshi.com/">点击跳转格式工厂</a></li>
<li>(水印)Inpaint&#x2F;<a href="https://inpaint.updatestar.com/">点击跳转Inpaint</a></li>
<li>(识别)天若OCR&#x2F;<a href="https://tianruoocr.cn/">点击跳转天若OCR</a></li>
<li>(前端）Axure RP<a href="https://www.axure.com/download">点击跳转Axure RP</a></li>
<li>Gif录制工具&#x2F;<a href="https://www.screentogif.com/">点击跳转Gif录制工具</a></li>
</ol>
</blockquote>
<h3 id="社交软件"><a href="#社交软件" class="headerlink" title="社交软件"></a>社交软件</h3><blockquote>
<ol>
<li>Tim &#x2F;<a href="https://office.qq.com/">点击跳转Tim</a></li>
<li>微信&#x2F;<a href="https://weixin.qq.com/">点击跳转微信</a></li>
</ol>
</blockquote>
<h3 id="音乐视频"><a href="#音乐视频" class="headerlink" title="音乐视频"></a>音乐视频</h3><blockquote>
<ol>
<li>Listen1 &#x2F;<a href="http://listen1.github.io/listen1/">点击跳转Listen1</a></li>
<li>Potplayer&#x2F;<a href="https://potplayer.en.softonic.com/">点击跳转Potplayer</a></li>
<li>QQ影音&#x2F;<a href="https://player.qq.com/">点击跳转QQ影音</a></li>
<li>EV录屏&#x2F;<a href="https://www.higeshi.cn/v2-lupingdstongyong?bd_vid=7425008542762323571">点击跳转EV录屏</a></li>
<li>网易云&#x2F;<a href="http://www.51xiazai.cn/soft/110772.htm">点击跳转网易云</a></li>
<li>央视影音&#x2F;<a href="https://app.cctv.com/appkhdxz/more/index.shtml#page5">点击跳转央视影音</a></li>
</ol>
</blockquote>
<h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><blockquote>
<ol>
<li>Office&#x2F;<a href="https://www.microsoft.com/zh-cn/microsoft-365/products-apps-services">点击跳转Office</a></li>
<li>幕布&#x2F;<a href="https://mubu.com/">点击跳转幕布</a></li>
<li>Note&#x2F; <a href="https://www.yinxiang.com/pc/?utm_source=b1&utm_medium=b1&utm_term=horka">点击跳转Note</a></li>
<li>Typora&#x2F;<a href="https://www.typora.io/">点击跳转Typora</a></li>
<li>Notepad++&#x2F;<a href="https://notepad-plus.en.softonic.com/">点击跳转Notepad++</a></li>
</ol>
</blockquote>
<h3 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h3><blockquote>
<ol>
<li>微信开发者工具&#x2F;<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">点击跳转微信开发者工具</a></li>
<li>Visual Studio Code&#x2F;<a href="https://code.visualstudio.com/Download">点击跳转Visual Studio Code</a></li>
<li>Visual studio2017&#x2F;<a href="http://autocad.hrbdbwlkj.top/pc/31.html">点击跳转Visual studio2017</a></li>
<li>Sublime_text&#x2F;<a href="http://www.sublimetext.com/download">点击跳转Sublime_text</a></li>
<li>Mysql&#x2F;<a href="https://dev.mysql.com/downloads/mysql/">点击跳转Mysql</a></li>
<li>Navicat for MySQL&#x2F;<a href="navicat.com/en/products">点击跳转Navicat for MySQLl</a></li>
<li>Dbeaver&#x2F;<a href="https://dbeaver.io/download/">点击跳转Dbeaver</a></li>
<li>SQL Server&#x2F;<a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads">点击跳转SQL Server</a></li>
<li>Jdk&#x2F; <a href="https://www.oracle.com/java/technologies/javase-downloads.html">点击跳转Jdk</a></li>
<li>IBM.Rational.Rose &#x2F;<a href="https://www.cnblogs.com/dufu-csdn/p/dufu_2.html">点击跳转IBM.Rational.Rose</a></li>
<li>Eclipse &#x2F;<a href="https://www.eclipse.org/downloads/">点击跳转Eclipse</a></li>
<li>IDEA &#x2F;<a href="https://www.jetbrains.com/products/#type=ide">点击跳转IDEA</a></li>
<li>HBuilder&#x2F;<a href="https://www.dcloud.io/hbuilderx.html">点击跳转HBuilder</a></li>
<li>文本编辑器typora&#x2F;<a href="https://www.typora.io/">点击跳转typora</a></li>
<li>Node.js环境&#x2F; <a href="https://nodejs.org/en/">点击跳转Node.js</a></li>
<li>git&#x2F;<a href="https://git-scm.com/downloads">点击跳转git</a></li>
<li>Redis-x64-3.0.504&#x2F;<a href="https://github.com/MicrosoftArchive/redis/releases">点击跳转Redis-x64-3.0.504</a></li>
<li>kai Linux&#x2F;[点击跳转kai Linux] (<a href="https://www.kali.org/docs/">https://www.kali.org/docs/</a>)</li>
<li>Tortoisesvn&#x2F;<a href="https://tortoisesvn.net/">点击跳转Tortoisesvn</a></li>
<li>Teamcity&#x2F;<a href="https://www.jetbrains.com/teamcity/">点击跳转Teamcity</a></li>
</ol>
</blockquote>
<h3 id="游戏软件"><a href="#游戏软件" class="headerlink" title="游戏软件"></a>游戏软件</h3><blockquote>
<ol>
<li>Steam&#x2F;<a href="http://lewan.baidu.com/lewanold?gameName=steam&idfrom=5018">点击跳转steam</a></li>
<li>Wegame&#x2F;<a href="https://www.wegame.com.cn/">点击跳转wegame</a></li>
</ol>
</blockquote>
<h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><blockquote>
<ol>
<li>(插件)侧边翻译&#x2F;<a href="https://www.jb51.net/softs/754671.html">点击跳转侧边翻译</a></li>
<li>(插件）油猴&#x2F;<a href="https://www.tampermonkey.net/">点击跳转油猴</a></li>
<li>(插件) Vs code插件&#x2F;open in browser &#x2F; Chinese &#x2F; Close HTML&#x2F;XML tag&#x2F;  tabnine&#x2F;Live Server</li>
<li>(插件网站)&#x2F;<a href="https://www.cxyhub.com/">点击跳转插件网址</a></li>
<li>greasyfork&#x2F;<a href="https://greasyfork.org/zh-CN/scripts">点击跳转greasyfork</a></li>
</ol>
</blockquote>
<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><h3 id="编程学习"><a href="#编程学习" class="headerlink" title="编程学习"></a>编程学习</h3><blockquote>
<ol>
<li>(java)KuangStudy&#x2F;<a href="https://www.kuangstudy.com/">点击跳转KuangStudy</a></li>
<li>(all)Gitee&#x2F;<a href="https://gitee.com/">点击跳转Gitee</a></li>
<li>(all)GitHub&#x2F;<a href="https://www.zhihu.com/question/20070065">点击跳转如何使用GitHub</a>&#x2F;<a href="https://github.com/gitbucket">点击跳转gitbucket源码</a>&#x2F;<a href="https://github.com/">点击跳转Github</a>&#x2F;<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">点击跳转Git分支管理策略</a>&#x2F;<a href="https://blog.csdn.net/jamesmf/article/details/17483787">点击跳转成功的 Git 分支模型</a>&#x2F;<a href="http://maven.apache.org/">点击跳转学习Git分支</a></li>
<li>(all)51cto&#x2F;<a href="https://www.51cto.com/">点击跳转51cto</a></li>
<li>(all)W3school&#x2F;<a href="https://www.w3school.com.cn/w3c/w3c_china.asp">点击跳转W3school</a></li>
<li>(all)W3cscool&#x2F;<a href="http://home.ustc.edu.cn/~xie1993/">点击跳转w3cschool</a></li>
<li>(all)菜鸟&#x2F;<a href="https://www.runoob.com/">点击跳转菜鸟</a></li>
<li>(all视频)B站&#x2F;<a href="https://www.bilibili.com/">点击跳转B站</a></li>
<li>(all)尚硅谷&#x2F;<a href="http://www.atguigu.com/">点击跳转尚硅谷</a></li>
<li>(问答题目)问答库&#x2F;<a href="https://www.asklib.com/">点击跳转问答库</a></li>
<li>(TIBOE编程语言排名)&#x2F;<a href="https://www.tiobe.com/tiobe-index/">点击跳转TIBOE编程语言排名</a></li>
<li>(开源中国)Oschina&#x2F;<a href="https://www.oschina.net/">点击跳转oschina</a></li>
<li>阿里巴巴开发手册&#x2F;<a href="https://kangroo.gitee.io/ajcg/#/?id=%e5%89%8d%e8%a8%80">点击跳转阿里巴巴开发手册</a></li>
<li>百度文档试用&#x2F;<a href="https://eduai.baidu.com/">点击跳转百度文档试用</a></li>
<li>软件测试(慕测)平台&#x2F;<a href="http://10.22.108.106/login2">点击跳转软件测试</a></li>
<li>网易公开课&#x2F;<a href="https://open.163.com/">点击跳转网易公开课</a></li>
<li>游戏设计模式&#x2F;<a href="http://gameprogrammingpatterns.com/">点击跳转游戏设计模式(英文版)</a>&#x2F; <a href="https://gpp.tkchu.me/">点击跳转游戏设计模式(中文版)</a></li>
<li>魔乐科技&#x2F;<a href="https://www.mldn.cn/article">点击跳转魔乐科技</a></li>
<li>oeasy&#x2F;<a href="http://oeasy.org/">点击跳转oeasy</a></li>
<li>代码不规范代表&#x2F;<a href="https://github.com/trekhleb/state-of-the-art-shitcode">点击跳转代码不规范代表</a></li>
<li>( Linux学习）Idev365&#x2F;<a href="https://next.idev365.com/">点击跳转Idev365</a></li>
<li>阿帕奇&#x2F;<a href="https://httpd.apache.org/">点击跳转阿帕奇</a></li>
<li>Scrapy入门教程&#x2F;<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html">点击跳转Scrapy入门教程</a>&#x2F;<a href="https://wiki.jikexueyuan.com/project/scrapy/scrapy-tutorial.html">点击跳转Scrapy 入门教程</a>&#x2F;<a href="https://doc.scrapy.org/en/latest/intro/overview.html">点击跳转英文版</a></li>
<li>Python文件读写&#x2F;<a href="https://www.yiibai.com/python/python_files_io.html">点击跳转Python文件读写</a></li>
<li>Python快速入门 &#x2F;<a href="https://www.yiibai.com/python/python_quick_guide.html">点击跳转Python快速入门</a></li>
<li>Python结巴分词&#x2F;<a href="https://www.cnblogs.com/LgyBean/p/6263008.html">点击跳转Python结巴分词</a></li>
<li>Python抓股票历史记录&#x2F;<a href="https://blog.csdn.net/qq_25936689/article/details/53217221">点击跳转Python抓股票历史记录</a></li>
<li>安卓在线文档&#x2F;<a href="http://developer.android.com/reference/packages.html">点击跳转安卓在线文档</a></li>
<li>网易有数&#x2F;<a href="https://youdata.163.com/index/manual/o/4Analyze_data_and_visualize_it/59showme.html">点击跳转网易有数</a></li>
<li>大数据学习路线&#x2F;<a href="https://blog.csdn.net/jianghero/article/details/79141787">点击跳转大数据学习路线</a></li>
<li>Apache kafka&#x2F;<a href="https://www.orchome.com/kafka/index">点击跳转Apache kafka</a></li>
<li>scala-lang&#x2F;<a href="https://www.scala-lang.org/api/current/">点击跳转scala-lang</a></li>
<li>王家林免费课&#x2F;<a href="https://blog.51cto.com/wilsonking/1765124">点击跳转王家林免费课</a></li>
<li>极客学院&#x2F;<a href="https://www.jikexueyuan.com/course/javascript/">点击跳转极客学院</a></li>
<li>Kafka Streams&#x2F;<a href="https://www.cnblogs.com/devos/p/5616086.html">点击跳转Kafka Streams</a></li>
<li>HA集群安装&#x2F;<a href="https://www.cnblogs.com/mengyao/p/5692467.html">点击跳转HA集群安装</a></li>
<li>Apache Storm&#x2F;<a href="http://ifeve.com/storm-fault-tolerance/">点击跳转Apache Storm</a></li>
<li>淘宝开放平台 - 文档中心&#x2F;<a href="http://open.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.W9hUpX&treeId=5&articleId=102465&docType=1">点击跳转淘宝开放平台 - 文档中心</a></li>
<li>makefile讲解&#x2F;<a href="https://www.cnblogs.com/mydomain/archive/2011/08/12/2136087.html">点击跳转makefile</a>&#x2F;<a href="https://blog.csdn.net/liang13664759/article/details/1771246">点击跳转makefile</a></li>
<li>Vim简明教程&#x2F;<a href="https://blog.csdn.net/niushuai666/article/details/7275406">点击跳转Vim简明教程</a></li>
<li>Linux学习&#x2F;<a href="http://www.study-area.org/menu2.htm">点击跳转Linux学习</a></li>
<li>Linux中find常见用法示例&#x2F;<a href="https://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html">点击跳转Linux中find常见用法示例</a></li>
<li>Awk命令&#x2F;<a href="https://www.cnblogs.com/chengmo/archive/2013/01/17/2865479.html">点击跳转Awk命令</a></li>
<li>Sed命令&#x2F;<a href="https://www.cnblogs.com/leaftime/p/3270257.html">点击跳转Sed命令</a></li>
<li>Linux_ServicesManagement_RHEL7&#x2F;<a href="https://blog.csdn.net/jmilk/article/details/49780157">点击跳转Linux_ServicesManagement_RHEL7</a></li>
<li>Mac OS X内核编程&#x2F;<a href="http://www.51qudong.net/155.html">点击跳转Mac OS X内核编程</a></li>
<li>关于批处理重定向&#x2F;<a href="https://www.cnblogs.com/ini_always/archive/2011/09/15/2177913.html">点击跳转关于批处理重定向</a></li>
<li>Bat命令学习&#x2F;<a href="https://www.cnblogs.com/SunShineYPH/archive/2011/12/13/2285570.html">点击跳转Bat命令</a></li>
<li>深入理解计算机系统&#x2F;<a href="https://www.cnblogs.com/lanxuezaipiao/p/4141351.html">点击跳转深入理解计算机系统</a></li>
<li>操作系统概论&#x2F;<a href="https://www.docin.com/p-634611005.html?qq-pf-to=pcqq.c2c">点击跳转操作系统概论</a></li>
<li>爱课程&#x2F;<a href="http://www.icourses.cn/home/?resId=74921&courseId=2583&firstShowFlag=1">点击跳转爱课程</a></li>
<li>Oracel技术&#x2F;<a href="https://www.oracle.com/java/technologies/">点击跳转Oracel技术</a></li>
<li>B&#x2F;S、和C&#x2F;S模式的特点&#x2F;<a href="http://blog.sina.com.cn/s/blog_6cfc341d0101704e.html">点击跳转B&#x2F;S、和C&#x2F;S模式的特点</a></li>
<li>Maven&#x2F;<a href="https://www.iteye.com/blog/stamen-2030552">点击跳转Maven冲突</a>&#x2F;<a href="https://search.maven.org/">中央仓库</a>&#x2F;<a href="https://www.cnblogs.com/adolfmc/archive/2012/07/31/2616908.html">maven常用命令介绍</a>&#x2F;<a href="https://developer.aliyun.com/mvn/guide">点击跳转阿里云Maven中央仓库</a>&#x2F;<a href="https://blog.csdn.net/sunzhenhua0608/article/details/32938533">点击跳转pom.xml文件详解</a>&#x2F;<a href="http://maven.apache.org/"> 点击跳转Apache maven</a></li>
<li>Maven进阶&#x2F;<a href="https://blog.csdn.net/wanghantong/article/details/9375013">点击跳转maven详解之生命周期与插件</a>&#x2F;<a href="https://blog.csdn.net/tounaobun/article/details/8959682">点击跳转Maven部署构件至远程仓库</a>&#x2F;<a href="https://www.cnblogs.com/tenghoo/p/maven_life_cycle.html">点击跳转Maven的生命周期</a>&#x2F;<a href="https://www.cnblogs.com/a-ray-of-sunshine/p/5011111.html">点击跳转Maven的几个重要配置文件</a>&#x2F;<a href="https://blog.csdn.net/silver_sail/article/details/41210667">Maven 打jar包配置</a></li>
<li>JAVA EXAMPLE PROGRAMS&#x2F;<a href="http://java2novice.com/java_string_examples/">点击跳转JAVA EXAMPLE PROGRAMS</a></li>
<li>Mockito 简明教程&#x2F;<a href="https://developer.aliyun.com/article/47318">点击跳转Mockito 简明教程</a></li>
<li>推酷&#x2F;<a href="https://www.tuicool.com/login">点击跳转推酷</a></li>
<li>IBM Java&#x2F;<a href="https://developer.ibm.com/languages/java/">点击跳转IBM Java</a></li>
<li>Hadoop&#x2F;<a href="http://hadoop.apache.org/docs/r2.7.6/hadoop-project-dist/hadoop-common/SingleCluster.html">点击跳转Hadoop</a></li>
<li>Jdk在线文档&#x2F;<a href="https://tool.oschina.net/apidocs/apidoc?api=jdk-zh">点击跳转Jdk在线文档</a></li>
<li>openanolis&#x2F;<a href="https://openanolis.cn/?spm=a2c6h.12873639.J_5404914170.4.4a1d7bb7OUpeLB">点击跳转openanolis</a></li>
<li>多编程语言基础学习&#x2F;<a href="http://www.java2s.com/">点击跳转多编程语言基础学习</a></li>
<li>开源博客&#x2F;<a href="https://www.oschina.net/blog">点击跳转开源博客</a></li>
<li>Spring Boot2&#x2F;<a href="https://www.yuque.com/atguigu/springboot/lcfeme">点击跳转Spring Boot2</a></li>
<li>C++ reference&#x2F;<a href="https://en.cppreference.com/w/">点击跳转C++ reference</a></li>
<li>StackOverflow&#x2F;<a href="https://stackoverflow.com/">点击跳转StackOverflow</a></li>
<li>Swagger&#x2F;<a href="https://swagger.io/">点击跳转Swagger</a></li>
<li>ITeye论坛&#x2F;<a href="https://www.iteye.com/forums">点击跳转ITeye论坛</a></li>
<li>Java POI Excel&#x2F;<a href="https://www.cnblogs.com/zqmingok/archive/2010/04/16/1713480.html">点击跳转Java POI Excel( pio:纯java操作excel的api )</a></li>
<li>DaniWeb&#x2F;<a href="https://www.daniweb.com/software-development/2">点击跳转DaniWeb</a></li>
<li>开源中国&#x2F;<a href="https://www.oschina.net/">点击跳转开源中国</a></li>
<li>InfoQ&#x2F;<a href="https://www.infoq.cn/">点击跳转InfoQ</a></li>
<li>stackoom&#x2F;<a href="https://stackoom.com/">点击跳转stackoom</a></li>
<li>ios.cpp&#x2F;<a href="https://opensource.apple.com/source/libcpp/libcpp-31/src/ios.cpp.auto.html">点击跳转ios.cpp</a></li>
<li>ewant&#x2F;<a href="https://www.ewant.org/">点击跳转ewant</a></li>
<li>优课联盟&#x2F;<a href="http://www.uooc.net.cn/league/union">点击跳转优课联盟</a></li>
<li>程序员导航站&#x2F;<a href="https://iiter.cn/">点击跳转程序员导航</a></li>
<li>Java工具包hutool&#x2F;<a href="https://www.hutool.cn/">点击跳转Java工具包hutool</a></li>
<li>开发者在线工具&#x2F;<a href="https://tool.lu/c/developer/">点击跳转开发者在线工具</a></li>
<li>Pmd5破解&#x2F;<a href="https://pmd5.com/">点击跳转Pmd5</a></li>
<li>编程导航&#x2F;<a href="https://www.code-nav.cn/">点击跳转编程导航</a></li>
<li>AI导航网&#x2F;<a href="https://www.ainav.cn/">点击跳转AI导航网</a></li>
<li>创造师&#x2F;<a href="http://chuangzaoshi.com/code">点击跳转创造师</a></li>
<li>github入门开源项目&#x2F;<a href="https://hellogithub.com/">点击跳转github开源项目</a></li>
<li>密码工具箱&#x2F;<a href="http://tools.jb51.net/password">点击跳转密码工具箱</a></li>
<li>API测试eolinker&#x2F;<a href="https://www.eolinker.com/?status=l%E2%80%A6">点击跳转API测试eolinker</a></li>
<li>GO酷壳&#x2F;<a href="https://coolshell.cn/">GO酷壳</a></li>
<li>Java语言Gecco&#x2F;<a href="http://www.geccocrawler.com/tag/sysc/">点击跳转Gecco</a></li>
<li>学习SpringBoot&#x2F;<a href="http://www.spring4all.com/">点击跳转学习Spring Boot</a>&#x2F;<a href="http://www.ityouknow.com/">点击跳转学习Spring Boot</a>&#x2F;<a href="https://blog.didispace.com/">点击跳转学习Spring Boot</a></li>
<li>学习大数据&#x2F;<a href="http://bigdata.evget.com/">点击跳转学习大数据慧都</a>&#x2F;<a href="http://lxw1234.com/">点击跳转学习大数据</a>&#x2F;<a href="https://www.iteblog.com/">点击跳转学习大数据</a>&#x2F;<a href="http://www.tianshouzhi.com/">点击跳转学习大数据</a></li>
<li>菜鸟工具&#x2F;<a href="https://c.runoob.com/">点击跳转菜鸟工具</a></li>
</ol>
</blockquote>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote>
<ol>
<li>Oracle系统表&#x2F;<a href="https://www.cnblogs.com/mq0036/p/4157267.html">点击跳转Oracle系统表</a></li>
<li>海量数据进行分库分表及其实践&#x2F;<a href="https://blog.csdn.net/wusd1256/article/details/79183970">点击跳转海量数据进行分库分表及其实践</a></li>
<li>Mysql8.0.17压缩包安装——超详细简单教程&#x2F;<a href="https://blog.csdn.net/qq_38264999/article/details/98858903">点击跳转Mysql8.0.17压缩包安装——超详细简单教程</a></li>
<li>shardingsphere-JDBC&#x2F;<a href="https://shardingsphere.apache.org/document/current/en/overview/">点击跳转shardingsphere-JDBC</a></li>
<li>MySQL引擎&#x2F;<a href="https://www.cnblogs.com/sopc-mc/archive/2011/11/01/2232212.html">点击跳转MySQL引擎</a></li>
<li>Redis&#x2F;<a href="https://juejin.cn/book/6844733724618129422/section/6844733724697985038#heading-1">点击跳转Redis</a>&#x2F;<a href="http://doc.redisfans.com/index.html">Redis命令参考</a></li>
<li>Mybatis Blog&#x2F;<a href="https://blog.mybatis.org/">点击跳转Mybatis Blog</a></li>
</ol>
</blockquote>
<h3 id="模板网站"><a href="#模板网站" class="headerlink" title="模板网站"></a>模板网站</h3><blockquote>
<ol>
<li>学之思开源考试系统&#x2F;<a href="https://gitee.com/mindskip/xzs-mysql?_from=gitee_search">点击跳转学之思开源考试系统</a></li>
<li>Vhr&#x2F;<a href="https://github.com/lenve/vhr/blob/master/README_zh.md">点击跳转Vhr</a></li>
<li>翁天信&#x2F;<a href="">点击跳转翁天信</a></li>
<li>小游网&#x2F;<a href="https://xiaoyou66.com/">点击跳转小游网</a></li>
<li>Axton&#x2F;<a href="https://axton.cc/">点击跳转Axton</a></li>
<li>SHIQI博客网站&#x2F;<a href="http://ursocute.github.io/">点击跳转SHIQI</a></li>
<li>reddit&#x2F;<a href="https://www.oschina.net/p/reddit">点击跳转reddit</a></li>
<li>vue音乐&#x2F;<a href="https://gitee.com/xyzer009/music-website">点击跳转vue音乐</a></li>
<li>el-admin&#x2F;<a href="https://el-admin.xin/login?redirect=/dashboard">点击跳转el-admin</a></li>
<li>Ant&#x2F;<a href="https://preview.pro.ant.design/dashboard/analysis">点击跳转Ant</a></li>
<li>Rollin博客&#x2F;<a href="https://realglow.cn/">点击跳转Rollin博客</a>&#x2F;<a href="https://github.com/chaochaoxiaoshu?tab=repositories">点击跳转源码</a></li>
<li>（前端博客）友人C博客&#x2F;<a href="https://www.ihewro.com/">点击跳转友人C博客</a></li>
<li>APP源码&#x2F;<a href="https://mp.weixin.qq.com/s/YY8v4roiEnG4QIei6niYdA">点击跳转APP源码</a></li>
<li>狗种类识别&#x2F;<a href="https://blog.csdn.net/u012319493/article/details/78826960">点击跳转狗种类识别</a></li>
<li>开源博客&#x2F;<a href="https://gitee.com/biezhi/tale#/biezhi/tale/blob/develop/LICENSE">点击跳转开源博客</a></li>
<li>（模板）模板之家&#x2F;<a href="http://www.cssmoban.com/">点击跳转模板之家</a></li>
<li>源码之家&#x2F;<a href="https://www.mycodes.net/">点击跳转源码之家</a></li>
<li>JavaWeb后端开发&#x2F;<a href="http://www.javaweb.vip/register">点击跳转JavaWeb后端开发</a></li>
<li>RuoYi&#x2F;<a href="https://gitee.com/y_project/RuoYi-Vue/tree/master/ruoyi-ui">点击跳转RuoYi</a></li>
<li>麋鹿鲁哟的博客&#x2F;<a href="https://www.cnblogs.com/miluluyo/">点击跳转麋鹿鲁哟的博客</a></li>
<li>Maxwell的博客&#x2F;<a href="https://imzxh.cn/">点击跳转Maxwell的博客</a></li>
<li>做棵大树的博客&#x2F;<a href="https://beatree.cn/">点击跳转做棵大树的博客</a></li>
<li>字节智造的博客&#x2F;<a href="https://www.zsxcool.com/">点击跳转字节智造的博客</a></li>
<li>四个空格的博客&#x2F;<a href="https://www.4spaces.org/">点击跳转四个空格的博客</a></li>
<li>程序猿甜品店的博客&#x2F;<a href="https://www.jefsky.com/">点击跳转程序猿甜品店的博客</a></li>
<li>汝者非鱼的博客&#x2F;<a href="https://rzfyu.com/">点击跳转汝者非鱼的博客</a></li>
<li>marsden&#x2F;<a href="https://www.marsden.cn/">点击跳转marsden</a></li>
<li>源码之家&#x2F;<a href="http://down.chinaz.com/">点击跳转源码之家</a></li>
</ol>
</blockquote>
<h3 id="前端UI"><a href="#前端UI" class="headerlink" title="前端UI"></a>前端UI</h3><blockquote>
<ol>
<li>(前端)Layui&#x2F;<a href="https://www.layui.com/doc/">点击跳转Layui</a></li>
<li>(前端框架)Bootstrap&#x2F;<a href="https://www.bootcss.com/">点击跳转Bootstrap</a></li>
<li>react-router&#x2F;<a href="https://serializedowen.com/docs/react-router-dom/%E5%90%91%E5%AF%BC/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">点击跳转react-router</a></li>
<li>(vue框架衍生）NuxtJS&#x2F;<a href="https://zh.nuxtjs.org/docs/2.x/get-started/upgrading/">点击跳转Nuxt</a></li>
<li>font awesome图标库&#x2F;<a href="http://www.fontawesome.com.cn/faicons/">点击跳转font awesome图标库</a></li>
<li>阿里巴巴矢量图标库&#x2F;<a href="https://www.iconfont.cn/">点击跳转阿里巴巴矢量图标库</a></li>
<li>(疫情接口)swagger&#x2F;<a href="http://121.199.29.84:8001/swagger-ui.html#/">点击跳转swagger</a></li>
<li>(css3渐变演示)Grabient&#x2F;<a href="https://www.grabient.com/">点击跳转Grabient</a></li>
<li>（基于Vue前端）Element&#x2F;<a href="https://element.eleme.cn/#/zh-CN">点击跳转Element</a></li>
<li>(前端模板和组件)飞冰&#x2F;<a href="https://ice.work/">点击跳转飞冰</a></li>
<li>（前端框架）vue&#x2F;<a href="https://cn.vuejs.org/">点击跳转vue</a></li>
<li>（前端框架）react&#x2F;<a href="https://react.docschina.org/">点击跳转react</a></li>
<li>(css预处理语言less)less&#x2F;<a href="http://lesscss.cn/">点击跳转less</a></li>
<li>cavas动画&#x2F;<a href="https://www.html5tricks.com/tag/html5-canvas/">点击跳转canvas动画</a></li>
<li>jQueryAPI查询&#x2F;<a href="https://jquery.cuishifeng.cn/">点击跳转JQueryAPI查询</a></li>
<li>Ant Design of React&#x2F;<a href="https://ant.design/docs/react/introduce-cn">点击跳转Ant Design of React</a></li>
<li>（前端）Bootstrap可视化布局&#x2F;<a href="https://www.bootcss.com/p/layoutit/">点击跳转Bootstrap可视化布局</a></li>
<li>Angular API&#x2F;<a href="https://angular.cn/api">点击跳转Angular API</a></li>
<li>Highcharts画js图表&#x2F;<a href="http://api.highcharts.com/highcharts">点击跳转Highcharts画js图表</a></li>
<li>正则表达式在线测试&#x2F;<a href="http://tools.jb51.net/tools/regex.asp">点击跳转正则表达式在线测试</a></li>
<li>前端小功能&#x2F;<a href="https://www.jq22.com/daima">点击跳转前端小功能</a></li>
<li>Xournal++&#x2F;<a href="https://xournalpp.github.io/">点击跳转Xournal++</a></li>
<li>H5-Dooring&#x2F;<a href="https://www.oschina.net/p/h5-dooring">点击跳转H5-Dooring</a></li>
<li>cssgridgenerator &#x2F; <a href="https://gitee.com/loock/cssgridgenerator">点击跳转cssgridgenerator</a>            </li>
<li>CSS Layout&#x2F;<a href="https://csslayout.io/">点击跳转CSS Layout</a></li>
<li>Flexbox布局&#x2F;<a href="https://loading.io/flexbox">点击跳转Flexbox布局</a></li>
<li>Layoutit布局&#x2F;<a href="https://grid.layoutit.com/">点击跳转layoutit</a></li>
<li>Ikonate&#x2F;<a href="https://ikonate.com/">点击跳转Ikonate</a></li>
<li>iconstore&#x2F;<a href="https://iconstore.co/">点击跳转iconstore</a></li>
<li>icoon&#x2F;<a href="https://icooon-mono.com/">点击跳转icoon</a></li>
<li>iconfinder&#x2F;<a href="https://www.iconfinder.com/">点击跳转iconfinder</a></li>
<li>设计seeseed&#x2F;<a href="https://www.seeseed.com/">点击跳转设计seeseed</a></li>
</ol>
</blockquote>
<h3 id="面试工作"><a href="#面试工作" class="headerlink" title="面试工作"></a>面试工作</h3><blockquote>
<ol>
<li>面试非基础问题&#x2F;<a href="https://blog.csdn.net/weixin_41462230/article/details/79006818">点击跳转面试非基础问题</a></li>
<li>(面试)力扣&#x2F;<a href="https://leetcode-cn.com/">点击跳转力扣</a></li>
<li>(找工作)Boss直聘&#x2F;<a href="https://www.zhipin.com/?sid=sem_pz_bdpc_dasou_title">点击跳转Boss直聘</a></li>
<li>(找工作)牛客求职网&#x2F;<a href="https://www.nowcoder.com/recommend">点击跳转牛客求职网</a></li>
<li>(找工作)牛客讨论区&#x2F;<a href="https://www.nowcoder.com/discuss">点击跳转牛客讨论区</a></li>
<li>(找工作)牛客校招日程&#x2F;<a href="https://www.nowcoder.com/school/schedule">点击跳转牛客校招日程</a></li>
<li>(找工作)名企笔试真题&#x2F;<a href="https://www.nowcoder.com/contestRoom">点击跳转名企笔试真题</a></li>
<li>(找工作)校招笔试真题&#x2F;<a href="https://www.nowcoder.com/">点击跳转校招笔试真题</a></li>
<li>Current Online Acmers&#x2F;<a href="http://acm.hdu.edu.cn/onlineuser.php">点击跳转Current Online Acmers</a></li>
<li>经典必刷&#x2F;<a href="https://www.nowcoder.com/ta/classic-code?query=&asc=true&order=&page=1">经典必刷</a></li>
<li>ACM在线编程&#x2F;<a href="https://www.nowcoder.com/ta/acm-training">点击跳转ACM在线编程</a></li>
<li>求职题库&#x2F;<a href="https://www.nowcoder.com/contestRoom">点击跳转求职题库</a></li>
<li>CSDN工作求职&#x2F;<a href="https://bbs.csdn.net/forums/vue?category=3">点击跳转CSDN工作求职</a></li>
<li>算法学习&#x2F;<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">点击跳转算法学习</a></li>
<li>前程无忧&#x2F;<a href="https://search.51job.com/list/190200,000000,0000,00,9,99,java,2,1.html?lang=c&postchannel=0000&workyear=99&cotype=99&degreefrom=99&jobterm=99&companysize=99&ord_field=0&dibiaoid=0&line=&welfare=">点击跳转前程无忧</a></li>
</ol>
</blockquote>
<h3 id="网页技能"><a href="#网页技能" class="headerlink" title="网页技能"></a>网页技能</h3><blockquote>
<ol>
<li>查看Github源码，将github.com修改为github1s.com</li>
<li>(查询历史价格)+vvv.com</li>
<li>前端设计建议（悬浮立体）</li>
<li>提高GitHub速度&#x2F;<a href="https://blog.csdn.net/codinglover5/article/details/107826097?utm_medium=distribute.pc_feed_404.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control404&depth_1-utm_source=distribute.pc_feed_404.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control40">点击跳转提高GitHub速度</a></li>
<li>Excel函数表&#x2F;<a href="https://support.microsoft.com/zh-cn/office/excel-%E5%87%BD%E6%95%B0-%E6%8C%89%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F-b3944572-255d-4efb-bb96-c6d90033e188?ui=zh-cn&rs=zh-cn&ad=cn">点击跳转Excel</a></li>
</ol>
</blockquote>
<h3 id="图文编辑"><a href="#图文编辑" class="headerlink" title="图文编辑"></a>图文编辑</h3><blockquote>
<ol>
<li>UML图&#x2F;<a href="https://www.processon.com/">点击跳转UML图</a></li>
<li>(小说）写作猫&#x2F;<a href="https://xiezuocat.com/#/?s=catbd3">点击跳转写作猫</a></li>
<li>(小说) 灯果写作&#x2F;<a href="https://www.mypitaya.com/coreTechnology?renqun_youhua=2326980&bd_vid=7295531632903482569">点击跳转灯果写作</a></li>
<li>(思维导图)XMind&#x2F;<a href="https://www.xmind.cn/">点击跳转XMind</a></li>
<li>(思维导图)墨刀&#x2F;<a href="https://modao.cc/">点击跳转墨刀</a></li>
<li>（logo）logo设计&#x2F;<a href="https://www.chuangkit.com/">点击跳转logo</a></li>
<li>图怪兽&#x2F;<a href="https://818ps.com/?user_source=r1463307">点击跳转图怪兽</a></li>
<li>论文&#x2F;<a href="https://www.cn-ki.net/">点击跳转论文</a></li>
<li>前端设计&#x2F;<a href="https://dribbble.com/">点击跳转前端设计</a></li>
<li>PPT&#x2F; <a href="http://www.1ppt.com/">点击跳转第一PPT</a>&#x2F;<a href="http://www.51pptmoban.com/">点击跳转51PPT</a>&#x2F;<a href="https://www.ypppt.com/">点击跳转优品PPT</a>&#x2F;<a href="https://pptsupermarket.com/">点击跳转PPT超级市场</a>&#x2F;<a href="https://www.dingdangsheji.com/">点击跳转叮当设计</a>&#x2F;<a href="http://sandunppt.com/#15">点击跳转三顿导航</a></li>
<li>processon&#x2F;<a href="https://www.processon.com/">点击跳转processon</a></li>
<li>迅捷画图&#x2F;<a href="https://www.liuchengtu.com/">点击跳转迅捷画图</a></li>
<li>画图工具draw.io&#x2F;<a href="https://draw.io/">画图工具draw.io</a></li>
<li>PlantUML&#x2F;<a href="https://plantuml.com/zh/">点击跳转PlantUML</a></li>
<li>Diagrams&#x2F;<a href="https://app.diagrams.net/">点击跳转Diagrams</a></li>
<li>在线抠图&#x2F;<a href="https://www.gaoding.com/koutu?hmsr=pcbaidu-sem-kt-kt-0350-sem">点击跳转在线抠图</a></li>
<li>下载图片千库网&#x2F;<a href="https://588ku.com/">点击跳转下载图片千库网</a></li>
<li>CleverPDF&#x2F;<a href="https://www.cleverpdf.com/">点击跳转CleverPDF</a></li>
<li>(无版权图片)Unsplash&#x2F;<a href="https://unsplash.com/">点击跳转Unsplash</a>&#x2F;<a href="https://pixabay.com/zh/">点击跳转pixabay</a></li>
<li>(思维导图)ZhiMap&#x2F;<a href="https://zhimap.com/">点击跳转ZhiMap</a></li>
<li>极简壁纸&#x2F;<a href="https://bz.zzzmh.cn/index">点击跳转极简壁纸</a></li>
<li>pixabay&#x2F;<a href="https://pixabay.com/">点击跳转pixabay</a></li>
<li>动图gfycat&#x2F;<a href="https://gfycat.com/">点击跳转gfycat</a></li>
<li>wallpaperscraft&#x2F;<a href="https://wallpaperscraft.com/">点击跳转wallpaperscraft</a></li>
<li>图片剪辑&#x2F;<a href="https://subei.me/">点击跳转图片剪辑</a></li>
<li>微信Markdown&#x2F;<a href="https://doocs.gitee.io/md/#/">点击跳转微信Markdown</a></li>
<li>新片场&#x2F;<a href="https://www.xinpianchang.com/square">点击跳转新片场</a></li>
<li>音效网&#x2F;<a href="https://www.aigei.com/sound/">点击跳转音效网</a></li>
<li>新极品&#x2F;<a href="http://www.fulivip.com/">点击跳转新极品</a></li>
<li>easyPDF&#x2F;<a href="https://easypdf.com/cn">点击跳转easyPDF</a></li>
<li>GitMind&#x2F;<a href="https://gitmind.cn/app/template">点击跳转GitMind</a></li>
<li>MindLine&#x2F;<a href="https://www.mindline.cn/webapp">点击跳转MindLine</a></li>
</ol>
</blockquote>
<h3 id="稀奇古怪"><a href="#稀奇古怪" class="headerlink" title="稀奇古怪"></a>稀奇古怪</h3><blockquote>
<ol>
<li>(推荐)Portableappk&#x2F;<a href="https://portableappk.com/">点击跳转portableappk</a></li>
<li>(古籍馆)古籍馆&#x2F;<a href="https://www.gujiguan.com/">点击跳转古籍馆</a></li>
<li>(视频)吾爱分享&#x2F;<a href="https://52online.vip/">点击跳转吾爱分享</a></li>
<li>一言金句&#x2F;<a href="https://hitokoto.cn/">点击跳转一言金句</a></li>
<li>正版中国&#x2F;<a href="https://getitfree.cn/">点击跳转正版中国</a></li>
<li>(电子书)&#x2F;<a href="https://manybooks.net/">点击跳转电子书</a></li>
<li>(搜索)工具搜索&#x2F;<a href="https://www.toolnb.com/">点击跳转工具搜索</a></li>
<li>scp&#x2F;<a href="http://scp-wiki.wikidot.com/">点击跳转scp</a></li>
<li>(视频)嘀哩嘀哩&#x2F;<a href="http://dlidli.wang/">点击跳转嘀哩嘀哩</a></li>
<li>(reg007注册平台)&#x2F;<a href="https://www.reg007.com/">点击跳转reg007</a></li>
<li>国际象棋&#x2F;<a href="https://lichess.org/">点击跳转国际象棋</a></li>
<li>AnywhereAnything&#x2F;<a href="http://demo.jb51.net/js/2016/html5_AnywhereAnything/">点击跳转AnywhereAnything</a></li>
<li>考证参考&#x2F;<a href="https://www.educity.cn/">点击跳转考证参考</a></li>
<li>科塔学术导航&#x2F;<a href="https://site.sciping.com/">点击跳转科塔学术导航</a></li>
<li>果壳科技&#x2F;<a href="https://www.guokr.com/scientific/channel/hot/">点击跳转果壳科技</a></li>
<li>自由钢琴&#x2F;<a href="https://www.autopiano.cn/">点击跳转自由钢琴</a></li>
<li>国家统计局&#x2F;<a href="http://www.stats.gov.cn/">点击跳转国家统计局</a></li>
<li>大数据导航&#x2F;<a href="http://hao.199it.com/">点击跳转大数据导航</a></li>
<li>镝数据&#x2F;<a href="https://www.dydata.io/">点击跳转镝数据</a></li>
<li>国家标准全文公开系统&#x2F;<a href="http://openstd.samr.gov.cn/bzgk/gb/icsMainQuery?icsKey=01.&icsName=%E7%BB%BC%E5%90%88%E3%80%81%E6%9C%AF%E8%AF%AD%E5%AD%A6%E3%80%81%E6%A0%87%E5%87%86%E5%8C%96%E3%80%81%E6%96%87%E7%8C%AE">点击跳转国家标准全文公开系统</a></li>
<li>学兔兔&#x2F;<a href="www.bzfxw.com">点击跳转学兔兔</a></li>
<li>Library Genesis&#x2F;<a href="http://www.libgen.is/">点击跳转Library Genesis</a></li>
<li>国家标准信息公共服务平台&#x2F;<a href="http://std.samr.gov.cn/">点击跳转国家标准信息公共服务平台</a></li>
<li>独普云&#x2F;<a href="https://www.dupuyun.com/">点击跳转独普云</a></li>
<li>zerotohero.ca语言地图&#x2F;<a href="https://www.zerotohero.ca/">点击跳转zerotohero.ca</a></li>
<li>学习强国&#x2F;<a href="https://www.xuexi.cn/">点击跳转学习强国</a></li>
<li>云听&#x2F;<a href="http://www.radio.cn/pc-portal/home/index.html">点击跳转云听</a></li>
<li>央视频&#x2F;<a href="https://www.yangshipin.cn/">点击跳转央视频</a></li>
<li>国家应急广播&#x2F;<a href="http://www.cneb.gov.cn/">点击跳转国家应急广播</a></li>
<li>鱼塘热榜&#x2F;<a href="https://tophub.fun/?class_id=IT&hot_id=85">点击跳转鱼塘热榜</a></li>
<li>音乐下载&#x2F;<a href="https://music.liuzhijin.cn/">音乐下载</a>&#x2F;<a href="https://music.zhuolin.wang/">VIP下载</a></li>
<li>AI剪辑&#x2F;<a href="https://fstongxue.gitee.io/">点击跳转AI剪辑</a></li>
<li>(视频教学)eHow&#x2F;<a href="https://www.ehow.com/">点击跳转eHow</a></li>
<li>ilovepdf&#x2F;<a href="https://www.ilovepdf.com/zh-cn">点击跳转ilovepdf</a></li>
<li>纪录片天地&#x2F;<a href="http://www.jlpcn.net/vodtypehtml/1.html">点击跳转纪录片天地</a></li>
<li>办公资源&#x2F;<a href="http://ppt.gxzfxz.top/ppt/?utm_source=baidu&utm_medium=cpc&utm_campaign=PPT-%E5%93%81%E7%89%8C%E8%AF%8D-A&utm_term=%E5%8A%9E%E5%85%AC%E8%B5%84%E6%BA%90%E7%BD%91%E5%AE%98%E7%BD%91">点击跳转办公资源</a></li>
<li>mixkit&#x2F;<a href="https://mixkit.co/free-stock-video/">点击跳转mixkit</a></li>
<li>运动会直播&#x2F;<a href="http://daonaerzhao.com/">点击跳转运动会直播</a></li>
<li>企查查&#x2F;<a href="https://www.qcc.com/web/search?key=%E5%B0%8F%E7%B1%B3">点击跳转企查查</a></li>
<li>北大出版社电子教材书架&#x2F;<a href="https://pup6.yunzhan365.com/bookcase/kiru/index.html">点击跳转北大出版社电子教材书架</a></li>
<li>医学微视&#x2F;<a href="https://www.mvyxws.com/">点击跳转医学微视</a></li>
<li>声同&#x2F;<a href="http://www.somdom.com/">点击跳转声同</a></li>
<li>书格&#x2F;<a href="https://www.shuge.org/ebooks/">点击跳转书格</a></li>
<li>国家教育资源公共服务平台&#x2F;<a href="https://www.eduyun.cn/">点击跳转国家教育资源公共服务平台</a></li>
<li>办事指南wikiHow&#x2F;<a href="https://zh.wikihow.com/%E9%A6%96%E9%A1%B5">点击跳转wikiHow</a></li>
<li>一个木函&#x2F;<a href="https://web.woobx.cn/">点击跳转一个木函</a></li>
<li>果汁导航&#x2F;<a href="http://guozhivip.com/">点击跳转果汁导航</a></li>
<li>哆啦网&#x2F;<a href="http://www.duola.vip/">点击跳转哆啦网</a></li>
<li>在线工具&#x2F;<a href="http://www.atoolbox.net/">点击跳转在线工具</a></li>
<li>考拉新媒体导航&#x2F;<a href="https://www.kaolamedia.com/">点击跳转考拉新媒体导航</a></li>
<li>萌导航&#x2F;<a href="https://www.moe123.net/">点击跳转萌导航</a></li>
<li>图床导航&#x2F;<a href="http://imgdh.com/">点击跳转图床导航</a></li>
<li>设保导航&#x2F;<a href="https://hao.sheboo.com/">点击跳转设保导航</a></li>
<li>大学资源网&#x2F;<a href="http://www.dxzy163.com/">点击跳转大学资源网</a></li>
<li>全历史&#x2F;<a href="https://www.allhistory.com/">点击跳转全历史</a></li>
<li>四大名著地图&#x2F;<a href="http://www.sdmzh.com.cn/map/index.html">点击跳转四大名著地图</a></li>
<li>好大学在线&#x2F;<a href="https://www.cnmooc.org/home/index.mooc">点击跳转好大学在线</a></li>
<li>时光网&#x2F;<a href="http://www.mtime.com/">点击跳转时光网</a></li>
<li>豆瓣网&#x2F;<a href="https://www.douban.com/">点击跳转豆瓣网</a></li>
<li>素材巷&#x2F;<a href="http://www.sucaixiang.com/">点击跳转素材巷</a></li>
<li>ted演讲&#x2F;<a href="https://www.ted.com/">点击跳转ted演讲</a></li>
<li>谷歌学术&#x2F;<a href="https://gfsoso.99lb.net/scholar.html">点击跳转谷歌学术</a></li>
<li>简答题&#x2F;<a href="https://www.jiandati.com/">点击跳转简答题</a></li>
<li>freeSLL&#x2F;<a href="https://freessl.cn/">点击跳转freeSSL</a></li>
<li>Startme&#x2F;<a href="https://start.me/start/cn/cn-start">点击跳转Startme</a></li>
<li>资源库&#x2F;<a href="https://onestar.newstar.net.cn/resources">点击跳转资源库</a></li>
<li>doyoudo&#x2F;<a href="http://www.doyoudo.com/">点击跳转doyoudo</a></li>
<li>好知&#x2F;<a href="http://www.howzhi.com/">点击跳转好知</a></li>
<li>鸠摩搜书&#x2F;<a href="https://www.jiumodiary.com/">点击跳转鸠摩搜书</a></li>
<li>莫尔斯电码对照&#x2F;<a href="https://www.qsl.net/bg3tt/zl/mesdm.htm">点击进入莫尔斯电码对照</a></li>
<li>书伴&#x2F;<a href="https://bookfere.com/">点击跳转书伴</a></li>
<li>相识电子书&#x2F;<a href="http://m.xiangshi123.com/">点击跳转相识电子书</a></li>
<li>超星读书&#x2F;<a href="http://book.chaoxing.com/">点击跳转超星读书</a></li>
<li>全球网络攻击实时地图&#x2F;<a href="https://cybermap.kaspersky.com/">点击跳转全球网络攻击实时地图</a></li>
<li>知妖&#x2F;<a href="https://www.cbaigui.com/%E4%B8%96%E7%95%8C">点击跳转知妖</a></li>
<li>爱航天网&#x2F;<a href="http://www.aihangtian.com/">点击跳转爱航天网</a></li>
<li>工具人&#x2F;<a href="https://www.toolfk.com/">点击跳转工具人</a></li>
<li>炫辕&#x2F;<a href="https://xydh.fun/">点击跳转炫辕</a></li>
<li>国内国外导航&#x2F;<a href="https://www.egouz.com/">点击跳转国内国外导航</a></li>
<li>兔二工具&#x2F;<a href="https://toer2.com/">点击跳转兔二工具</a></li>
<li>工具123&#x2F;<a href="http://www.gjw123.com/">点击跳转工具123</a></li>
<li>一个工具箱&#x2F;<a href="http://www.atoolbox.net/">点击跳转一个工具箱</a></li>
<li>孟坤工具箱&#x2F;<a href="http://tool.mkblog.cn/">点击跳转孟坤工具箱</a></li>
<li>实用工具大全&#x2F;<a href="https://tool.520101.com/">点击跳转使用工具大全</a></li>
<li>Startme&#x2F;<a href="https://start.me/start/cn/cn-start">点击跳转Startme</a></li>
</ol>
</blockquote>
<h3 id="其他网址"><a href="#其他网址" class="headerlink" title="其他网址"></a>其他网址</h3><h2 id="电话"><a href="#电话" class="headerlink" title="电话"></a>电话</h2><blockquote>
<ol>
<li>12345 市长热线</li>
<li>12348 全国免费法律咨询</li>
<li>12333 全国劳动监察</li>
<li>12368 全国法院查询</li>
<li>12388 妇女权益保护</li>
</ol>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>欢迎大家总结</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2022/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<center>朝菌不知晦朔，蟪蛄不知春秋</center>
</blockquote>
<p><escape><span id="more"></span></escape></p>
<blockquote>
<p>设计是为了提高软件的性能和安全以及程序员更加容易维护和编写，设计模式不是单一的，是复杂灵活的，GOF&#x2F;&#x2F;四人组</p>
</blockquote>
<h3 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1. 设计原则"></a>1. 设计原则</h3><table>
<thead>
<tr>
<th>设计原则名称</th>
<th>定  义</th>
<th>使用频率</th>
</tr>
</thead>
<tbody><tr>
<td>单一职责原则(Single Responsibility Principle, SRP)</td>
<td>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>开闭原则(Open-Closed Principle, OCP)</td>
<td>软件实体应当对扩展开放，对修改关闭</td>
<td>★★★★★</td>
</tr>
<tr>
<td>里氏代换原则(Liskov Substitution Principle, LSP)</td>
<td>所有引用基类的地方必须能透明地使用其子类的对象</td>
<td>★★★★★</td>
</tr>
<tr>
<td>依赖倒转原则(Dependence Inversion Principle, DIP)</td>
<td>高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象</td>
<td>★★★★★</td>
</tr>
<tr>
<td>接口隔离原则(Interface Segregation Principle, ISP)</td>
<td>客户端不应该依赖那些它不需要的接口</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>合成复用原则(Composite Reuse Principle, CRP)</td>
<td>优先使用对象组合，而不是继承来达到复用的目的</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>迪米特法则(Law of Demeter, LoD)</td>
<td>每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</td>
<td>★★★☆☆</td>
</tr>
</tbody></table>
<h3 id="2-创建型模式（记忆：工建原单，对对象的创建和使用）"><a href="#2-创建型模式（记忆：工建原单，对对象的创建和使用）" class="headerlink" title="2. 创建型模式（记忆：工建原单，对对象的创建和使用）"></a>2. 创建型模式（记忆：工建原单，对对象的创建和使用）</h3><blockquote>
<ol>
<li>简单工厂模式(Simple Factory)</li>
</ol>
<ul>
<li>结构：工厂角色，抽象产品角色，具体产品角色</li>
<li>类型：</li>
<li>说明：把所有需要实例化的对象放入一个工厂里，由工厂进行实例化</li>
<li>试用范围：没有太过于复杂的软件</li>
</ul>
</blockquote>
<blockquote>
<ol start="2">
<li>工厂方法模式(Factory Method）</li>
</ol>
<ul>
<li>结构：抽象产品，具体产品，抽象工厂，具体工厂</li>
<li>类型：</li>
<li>说明：相对应于一个产品等级结构，也就是同一类型的对象和类，在简单工厂下再造具体工厂，负责一个品牌的同一类型</li>
<li>试用范围：比较广泛</li>
</ul>
</blockquote>
<blockquote>
<ol start="3">
<li>抽象工厂模式(Abstract Factory)</li>
</ol>
<ul>
<li>结构：抽象工厂，具体工厂，抽象产品，具体产品</li>
<li>类型：</li>
<li>说明：相对应于一个产品族，也就是一个品牌的所有类和对象</li>
<li>试用范围：对于一个产品族</li>
</ul>
</blockquote>
<blockquote>
<ol start="4">
<li>建造者模式(Builder)</li>
</ol>
<ul>
<li>结构：抽象建造者，具体建造者，产品角色，指挥者</li>
<li>类型：</li>
<li>说明：有复杂的内部结构，组成结构类似</li>
<li>试用范围：</li>
</ul>
</blockquote>
<blockquote>
<ol start="5">
<li>原型模式(Prototype)</li>
</ol>
<ul>
<li>结构：抽象原型，具体原型，客户类</li>
<li>类型：深克隆（Serializable）浅克隆（Cloneable）</li>
<li>说明：可以通过一个已有对象复制获取更多的对象</li>
<li>试用范围：不是单例的情况</li>
</ul>
</blockquote>
<blockquote>
<ol start="6">
<li>单例模式(Singleton)</li>
</ol>
<ul>
<li>结构：instance</li>
<li>类型：懒汉型+延迟加载+锁、饿汉型、静态内部类、枚举</li>
<li>说明：Singleton只有一个实例</li>
<li>试用范围：</li>
</ul>
</blockquote>
<h3 id="3-结构型模式（记忆-ABCDFFP，对现有系统进行补救以及对现有类进行重用，类与对象，类的结构，对象与类，对象的结构）"><a href="#3-结构型模式（记忆-ABCDFFP，对现有系统进行补救以及对现有类进行重用，类与对象，类的结构，对象与类，对象的结构）" class="headerlink" title="3. 结构型模式（记忆:ABCDFFP，对现有系统进行补救以及对现有类进行重用，类与对象，类的结构，对象与类，对象的结构）"></a>3. 结构型模式（记忆:ABCDFFP，对现有系统进行补救以及对现有类进行重用，类与对象，类的结构，对象与类，对象的结构）</h3><blockquote>
<ol>
<li>适配器模式（Adapter）</li>
</ol>
<ul>
<li><p>结构：目标抽象类，适配器类，适配者类，客户类</p>
</li>
<li><p>类型：类适配器，对象适配器，缺省适配器（默认适配器），双向适配器</p>
</li>
<li><p>说明：将一个接口转换为客户希望的另一个接口，或其他跨平台操作</p>
</li>
<li><p>试用范围：有很多第三方接口</p>
</li>
</ul>
</blockquote>
<blockquote>
<ol start="2">
<li>桥接模式（柄体模式，接口模式,Bridge）</li>
</ol>
<ul>
<li>结构：抽象类（不是接口），扩充抽象类，实现类接口，具体实现类</li>
<li>类型：</li>
<li>说明:将抽象和实现部分分离，使它们可以独立的变化</li>
<li>试用范围：两个独立变化的维度，例如彩笔，有彩笔类和颜色，把颜色定为类，彩笔也定为类</li>
</ul>
</blockquote>
<blockquote>
<ol start="3">
<li>组合模式(Composite，树形结构，部分-整体)</li>
</ol>
<ul>
<li><p>结构：抽象构件，叶子构件，容器构件，客户类</p>
</li>
<li><p>类型：透明组合模式，安全组合模式（一般用）</p>
</li>
<li><p>说明：树形结构</p>
</li>
<li><p>试用范围：客户能够忽略不同对象层次的变化</p>
</li>
</ul>
</blockquote>
<blockquote>
<ol start="4">
<li>装饰模式(Decorator，替代继承，用来更加好看)</li>
</ol>
<ul>
<li><p>结构：抽象构件，具体构件，抽象装饰类，具体装饰类</p>
</li>
<li><p>类型：透明修饰（很少有），半透明修饰（一般）</p>
</li>
<li><p>说明：比继承更加灵活</p>
</li>
<li><p>试用范围：final定义的类想要继承，密码修饰，其他IO</p>
</li>
</ul>
</blockquote>
<blockquote>
<ol start="5">
<li>外观模式(Facade)</li>
</ol>
<ul>
<li><p>结构：外观角色，子系统模式</p>
</li>
<li><p>类型：</p>
</li>
<li><p>说明：通过外观类提供子接口</p>
</li>
<li><p>试用范围：C&#x2F;S客户端菜单或者工具栏，B&#x2F;S首页和导航栏,</p>
</li>
</ul>
</blockquote>
<blockquote>
<ol start="6">
<li>享元模式(Flyweight，节约内存空间)</li>
</ol>
<ul>
<li>结构：抽象享元类，具体享元类，非共享具体享元类，享元工厂类</li>
<li>类型：</li>
<li>说明：</li>
<li>试用范围：存在大量相同或者相似的对象</li>
</ul>
</blockquote>
<blockquote>
<ol start="7">
<li>代理模式(Proxy)</li>
</ol>
<ul>
<li>结构：抽象主题角色，代理主题角色，真实主题角色</li>
<li>类型：远程代理，虚拟代理，保护代理，动态代理，缓冲带你，防火墙代理，同步化代理，智能引用代理</li>
<li>说明：</li>
<li>试用范围：不能直接访问对象或者其他类</li>
</ul>
</blockquote>
<h3 id="4-行为型模式（对象之间的交互，中间，类行为型模式，对象行为型模式）"><a href="#4-行为型模式（对象之间的交互，中间，类行为型模式，对象行为型模式）" class="headerlink" title="4. 行为型模式（对象之间的交互，中间，类行为型模式，对象行为型模式）"></a>4. 行为型模式（对象之间的交互，中间，类行为型模式，对象行为型模式）</h3><blockquote>
<ol>
<li>职责链模式（Chain of Responsibility）</li>
</ol>
<ul>
<li>结构：抽象处理者，具体处理者，客户类</li>
<li>类型：</li>
<li>说明：从上到下，可能是直线，也可能是一个环，树形结构，</li>
<li>试用范围：try catch语句</li>
</ul>
</blockquote>
<blockquote>
<ol start="2">
<li>命令模式(Command，动作模式，事务模式)</li>
</ol>
<ul>
<li>结构：抽象命令类，具体命令类，调用者，接收者，客户类</li>
<li>类型：</li>
<li>说明：本质是对命令进行封装</li>
<li>试用范围：支持命令的撤销（Undo）和恢复（Redo）操作，命令队列和宏（组合）命令</li>
</ul>
</blockquote>
<blockquote>
<ol start="3">
<li>解释器模式（Interpreter，设计一种新的语言）</li>
</ol>
<ul>
<li>结构：抽象表达式，终结符表达式，非终结符表达式，环境类，客户类</li>
<li>类型：</li>
<li>说明：文法规则：:: &#x3D; 定义为，| 或，{}组合,* 0至多次,抽象语法树（AST）</li>
<li>试用范围：简单文法规则</li>
</ul>
</blockquote>
<blockquote>
<ol start="4">
<li>迭代器模式(Iterator，游标)</li>
</ol>
<ul>
<li>结构：抽象迭代器，具体迭代器，抽象聚合类，具体聚合类</li>
<li>类型：Object next（） Boolean hasNext()  void remove()互相关联next()</li>
<li>说明：</li>
<li>试用范围:对一个聚合对象进行遍历,可以是List也可以是Set</li>
</ul>
</blockquote>
<blockquote>
<p>5.中介者模式(Mediator)</p>
<ul>
<li>结构：抽象中介者，具体中介者，抽象同事类，具体同事类</li>
<li>类型：</li>
<li>说明：结构性（中转作用）行为性（协调作用）</li>
<li>试用范围：MVC</li>
</ul>
</blockquote>
<blockquote>
<ol start="6">
<li>备忘录模式(Memento)</li>
</ol>
<ul>
<li>结构：原发器，备忘录，负责人</li>
<li>类型：</li>
<li>说明：要注意封装</li>
<li>试用范围：撤销和恢复，后悔想要修改，数据库，</li>
</ul>
</blockquote>
<blockquote>
<ol start="7">
<li>观察者模式(Observer)</li>
</ol>
<ul>
<li>结构：目标类（可以是抽象，也可以是实现类），具体目标类（可以很多类），观察者，具体观察者</li>
<li>类型：</li>
<li>说明：Java.util包提供了Observable类以及Observer接口</li>
<li>试用范围：有两个方面，一个依赖另一个方面，MVC</li>
</ul>
</blockquote>
<blockquote>
<ol start="8">
<li>状态模式（State）</li>
</ol>
<ul>
<li>结构：环境类，抽象状态类，具体状态类</li>
<li>类型：</li>
<li>说明：</li>
<li>试用范围：解决系统中复杂对象的状态转换以及不同行为状态下行为的封装问题</li>
</ul>
</blockquote>
<blockquote>
<ol start="9">
<li>策略模式(Strategy，封装算法)</li>
</ol>
<ul>
<li>结构：环境类，抽象策略类，具体策略类</li>
<li>类型：</li>
<li>说明：区别于硬编码</li>
<li>试用范围：用于算法的自由切换和扩展</li>
</ul>
</blockquote>
<blockquote>
<ol start="10">
<li>模板方法模式(Template Method)</li>
</ol>
<ul>
<li>结构：抽象类，具体子类</li>
<li>类型：</li>
<li>说明：在抽象父类中提供一个称之为模板方法的方法来定义这些方法的执行次序，基本方法（钩子方法，抽象方法，具体方法）+模板方法</li>
<li>试用范围：框架（spring，struct）</li>
</ul>
</blockquote>
<blockquote>
<ol start="11">
<li>访问者模式(Visitor)</li>
</ol>
<ul>
<li>结构：抽象访问者，具体访问者，抽象元素，具体元素，对象结构（List，Set）</li>
<li>类型：</li>
<li>说明：与其他模式联用</li>
<li>试用范围：变量</li>
</ul>
</blockquote>
<h3 id="5-一句话总结设计模式"><a href="#5-一句话总结设计模式" class="headerlink" title="5. 一句话总结设计模式"></a>5. 一句话总结设计模式</h3><table>
<tbody>
<tr>
<th>
分类</th>
<th>
设计模式</th>
<th>
简述</th>
<th>
一句话归纳</th>
<th>
目的</th>
<th>
生活案例</th>
</tr>
<tr>
<td colspan="1" rowspan="4">
创建型设计模式<br>
（简单来说就是用来创建对象的）</td>
<td>
工厂模式（Factory Pattern）</td>
<td>
不同条件下创建不同实例</td>
<td>
产品标准化，生产更高效</td>
<td>
封装创建细节</td>
<td>
实体工厂</td>
</tr>
<tr>
<td>
单例模式（Singleton Pattern）</td>
<td>
保证一个类仅有一个实例，并且提供一个全局访问点</td>
<td>
世上只有一个我</td>
<td>
保证独一无二</td>
<td>
CEO</td>
</tr>
<tr>
<td>
原型模式（Prototype Pattern）</td>
<td>
通过拷贝原型创建新的对象</td>
<td>
拔一根猴毛，吹出千万个</td>
<td>
高效创建对象</td>
<td>
克隆</td>
</tr>
<tr>
<td>
建造者模式（Builder Pattern）</td>
<td>
用来创建复杂的复合对象</td>
<td>
高配中配和低配，想选哪配就哪配</td>
<td>
开放个性配置步骤</td>
<td>
选配</td>
</tr>
<tr>
<td colspan="1" rowspan="7">
结构型设计模式<br>
（关注类和对象的组合）</td>
<td>
代理模式（Proxy Pattern）</td>
<td>
为其他对象提供一种代理以控制对这个对象的访问</td>
<td>
没有资源没时间，得找别人来帮忙</td>
<td>
增强职责</td>
<td>
媒婆</td>
</tr>
<tr>
<td>
外观模式（Facade Pattern）</td>
<td>
对外提供一个统一的接口用来访问子系统</td>
<td>
打开一扇门，通向全世界</td>
<td>
统一访问入口</td>
<td>
前台</td>
</tr>
<tr>
<td>
装饰器模式（Decorator Pattern）</td>
<td>
为对象添加新功能</td>
<td>
他大舅他二舅都是他舅</td>
<td>
灵活扩展、同宗同源</td>
<td>
煎饼</td>
</tr>
<tr>
<td>
享元模式（Flyweight Pattern）</td>
<td>
使用对象池来减少重复对象的创建</td>
<td>
优化资源配置，减少重复浪费</td>
<td>
共享资源池</td>
<td>
全国社保联网</td>
</tr>
<tr>
<td>
组合模式（Composite Pattern）</td>
<td>
将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理</td>
<td>
人在一起叫团伙，心在一起叫团队</td>
<td>
统一整体和个体</td>
<td>
组织架构树</td>
</tr>
<tr>
<td>
适配器模式（Adapter Pattern）</td>
<td>
将原来不兼容的两个类融合在一起</td>
<td>
万能充电器</td>
<td>
兼容转换</td>
<td>
电源适配</td>
</tr>
<tr>
<td>
桥接模式（Bridge Pattern）</td>
<td>
将两个能够独立变化的部分分离开来</td>
<td>
约定优于配置</td>
<td>
不允许用继承</td>
<td>
桥</td>
</tr>
<tr>
<td colspan="1" rowspan="11">
行为型设计模式<br>
（关注对象之间的通信）</td>
<td>
模板模式（Template Pattern）</td>
<td>
定义一套流程模板，根据需要实现模板中的操作</td>
<td>
流程全部标准化，需要微调请覆盖</td>
<td>
逻辑复用</td>
<td>
把大象装进冰箱</td>
</tr>
<tr>
<td>
策略模式（Strategy Pattern）</td>
<td>
封装不同的算法，算法之间能互相替换</td>
<td>
条条大道通罗马，具体哪条你来定</td>
<td>
把选择权交给用户</td>
<td>
选择支付方式</td>
</tr>
<tr>
<td>
责任链模式（Chain of Responsibility Pattern）</td>
<td>
拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</td>
<td>
各人自扫门前雪，莫管他们瓦上霜</td>
<td>
解耦处理逻辑</td>
<td>
踢皮球</td>
</tr>
<tr>
<td>
迭代器模式（Iterator Pattern）</td>
<td>
提供一种方法顺序访问一个聚合对象中的各个元素</td>
<td>
流水线上坐一天，每个包裹扫一遍</td>
<td>
统一对集合的访问方式</td>
<td>
逐个检票进站</td>
</tr>
<tr>
<td>
命令模式（Command Pattern）</td>
<td>
将请求封装成命令，并记录下来，能够撤销与重做</td>
<td>
运筹帷幄之中，决胜千里之外</td>
<td>
解耦请求和处理</td>
<td>
遥控器</td>
</tr>
<tr>
<td>
状态模式（State Pattern）</td>
<td>
根据不同的状态做出不同的行为</td>
<td>
状态驱动行为，行为决定状态</td>
<td>
绑定状态和行为</td>
<td>
订单状态跟踪</td>
</tr>
<tr>
<td>
备忘录模式（Memento Pattern）</td>
<td>
保存对象的状态，在需要时进行恢复</td>
<td>
失足不成千古恨，想重来时就重来</td>
<td>
备份、后悔机制</td>
<td>
草稿箱</td>
</tr>
<tr>
<td>
中介者模式（Mediator Pattern）</td>
<td>
将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散</td>
<td>
联系方式我给你，怎么搞定我不管</td>
<td>
统一管理网状资源</td>
<td>
朋友圈</td>
</tr>
<tr>
<td>
解释器模式（Interpreter Pattern）</td>
<td>
给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</td>
<td>
我想说”方言“，一切解释权都归我</td>
<td>
实现特定语法解析</td>
<td>
摩斯密码</td>
</tr>
<tr>
<td>
观察者模式（Observer Pattern）</td>
<td>
状态发生改变时通知观察者，一对多的关系</td>
<td>
到点就通知我</td>
<td>
解耦观察者与被观察者</td>
<td>
闹钟</td>
</tr>
<tr>
<td>
访问者模式（Visitor Pattern）</td>
<td>
稳定数据结构，定义新的操作行为</td>
<td>
横看成岭侧成峰，远近高低各不同</td>
<td>
解耦数据结构和数据操作</td>
<td>
KPI考核</td>
</tr>
<tr>
<td>
&nbsp;</td>
<td>
委派模式（Delegate Pattern）</td>
<td>
允许对象组合实现与继承相同的代码重用，负责任务的调用和分配</td>
<td>
这个需求很简单，怎么实现我不管</td>
<td>
只对结果负责</td>
<td>
授权委托书</td>
</tr>
</tbody>
</table>


<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>设计模式对自己的编程的思想和规范有了很好的引导,以及对软件完成后性能和安全的思考加深，如果有一些错误和建议，欢迎评论区指出。</p>
]]></content>
      <tags>
        <tag>思想</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构初识</title>
    <url>/2022/05/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<center>路漫漫其修远兮，吾将上下而求索</center>
</blockquote>
<p><escape><span id="more"></span></escape></p>
<h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h2><h3 id="1-1-基本概念和术语"><a href="#1-1-基本概念和术语" class="headerlink" title="1.1 基本概念和术语"></a>1.1 基本概念和术语</h3><ul>
<li><p>数据</p>
</li>
<li><p>数据元素</p>
</li>
<li><p>数据对象【数据元素的集合】</p>
</li>
<li><p>数据类型</p>
<ul>
<li>原子类型</li>
<li>结构类型</li>
<li>抽象数据类型</li>
</ul>
</li>
<li><p>数据结构</p>
<blockquote>
<p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合</p>
</blockquote>
<ul>
<li><p>逻辑结构</p>
</li>
<li><p>存储结构</p>
</li>
<li><p>数据的运算</p>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-数据结构三要素"><a href="#1-2-数据结构三要素" class="headerlink" title="1.2 数据结构三要素"></a>1.2 数据结构三要素</h3><ul>
<li>逻辑结构</li>
</ul>
<blockquote>
<p>包括线性结构【一对一】：一般线性表、受限线性表【栈、队列、串】、线性表推广【数组】</p>
<p>非线性结构【一对多或同属一个集合】：集合、树形结构【一般树、二叉树、B+树】、图状结构【有向图、无向图，网状结构】</p>
</blockquote>
<ul>
<li>存储结构【物理】</li>
</ul>
<blockquote>
<p>顺序存储、链式存储、索引存储、散列存储【hash】</p>
</blockquote>
<ul>
<li>数据的运算</li>
</ul>
<blockquote>
<p>运算的定义【逻辑结构】和实现【存储结构】</p>
</blockquote>
<h3 id="1-3-算法"><a href="#1-3-算法" class="headerlink" title="1.3  算法"></a>1.3  算法</h3><p>&lt;1&gt; 五个特性</p>
<ul>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
<li>输入</li>
<li>输出</li>
</ul>
<p>&lt;2&gt;效率的度量</p>
<ul>
<li>时间复杂度</li>
</ul>
<blockquote>
<p>最坏时间复杂度，平均时间复杂度，最好时间复杂度</p>
</blockquote>
<ul>
<li>空间复杂度</li>
</ul>
<h2 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2. 线性表"></a>2. 线性表</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><blockquote>
<p>线性表是具有相同数据类型的n（n &gt;&#x3D; 0）个数据元素的优先序列</p>
</blockquote>
<h3 id="2-2-线性表的基本操作"><a href="#2-2-线性表的基本操作" class="headerlink" title="2.2 线性表的基本操作"></a>2.2 线性表的基本操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">InitList</span>(&amp;L) <span class="comment">//初始化表</span></span><br><span class="line">Length（L）<span class="comment">//求表长</span></span><br><span class="line">   <span class="built_in">LocateElem</span>(L,e)<span class="comment">//按值查找操作</span></span><br><span class="line">   <span class="built_in">GetElem</span>(L,i)<span class="comment">//按位查找操作</span></span><br><span class="line">   <span class="built_in">ListInsert</span>(&amp;L,i,e)<span class="comment">//插入操作</span></span><br><span class="line">   <span class="built_in">ListDelete</span>(&amp;L,i,&amp;e)<span class="comment">//删除操作</span></span><br><span class="line">   <span class="built_in">PrintList</span>(L)<span class="comment">//输出操作</span></span><br><span class="line">   <span class="built_in">Empty</span>(L)<span class="comment">//判空操作</span></span><br><span class="line">   <span class="built_in">DestoryList</span>(&amp;L)<span class="comment">//销毁操作</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-顺序表【数组】"><a href="#2-3-顺序表【数组】" class="headerlink" title="2.3 顺序表【数组】"></a>2.3 顺序表【数组】</h3><blockquote>
<p>线性表的顺序存储【随机存储的存储结构】，其逻辑顺序与其物理顺序相同，线性表中元素的位序是从1开始的，高级程序设计语言数组的下标从0开始</p>
</blockquote>
<ul>
<li>顺序表不适合插入和删除</li>
</ul>
<h3 id="2-4-单链表"><a href="#2-4-单链表" class="headerlink" title="2.4 单链表"></a>2.4 单链表</h3><blockquote>
<p>线性表的链式存储</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123; <span class="comment">//定义单链表结点类型</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;<span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure>

<ul>
<li>采用头插法建立单链表</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span> </span>&#123;<span class="comment">//逆向建立单链表</span></span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//创建头结点</span></span><br><span class="line">    L-&gt;next = null;<span class="comment">//初始为空链表</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//输入结点的值</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">9999</span>) &#123;<span class="comment">//输入9999表示结束</span></span><br><span class="line">        s = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode))；<span class="comment">//创建新结点</span></span><br><span class="line">        s -&gt; data = x;</span><br><span class="line">        s -&gt; next = L -&gt; next;</span><br><span class="line">        L -&gt; next = s;<span class="comment">//将新结点插入表中，L为头指针</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点和优点：简单，生成结点的次序和输入数据的顺序不一致</p>
</blockquote>
<ul>
<li>采用尾插法建立单链表</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;L)</span> </span>&#123;<span class="comment">//正向建立单链表</span></span><br><span class="line">    <span class="type">int</span> x;<span class="comment">//设置元素类型为整型</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//创建头结点</span></span><br><span class="line">    LNode *s，*r = L;<span class="comment">//r为表尾指针</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">9999</span>) &#123;<span class="comment">//输入9999表示结束</span></span><br><span class="line">        s = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode))；<span class="comment">//创建新结点</span></span><br><span class="line">        s -&gt; data = x;</span><br><span class="line">        r -&gt; next = s;</span><br><span class="line">        r = s;<span class="comment">//r指向新的表尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r -&gt; next = null;<span class="comment">//尾结点指针置空</span></span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>按序号查找节点值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode *<span class="title">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;<span class="comment">//计数，初始为1</span></span><br><span class="line">    LNode *p = L -&gt; next;<span class="comment">//头结点指针赋值给p</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;<span class="comment">//若i等于0，则返回头结点</span></span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>按值查找表节点</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode *<span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span> </span>&#123;</span><br><span class="line">    LNode *p = L -&gt; next;</span><br><span class="line">    <span class="keyword">while</span>(p != null &amp;&amp; p -&gt; date != e) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>插入节点操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p = <span class="built_in">GetElem</span>(L,i<span class="number">-1</span>);</span><br><span class="line">s -&gt; next = p -&gt; next;</span><br><span class="line">p -&gt; next = s;</span><br></pre></td></tr></table></figure>

<ul>
<li>对某一结点进行前插操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s -&gt; next = p -&gt; next;</span><br><span class="line">p -&gt; next = s;</span><br><span class="line">temp = p -&gt; data;<span class="comment">//交换数据域</span></span><br><span class="line">p -&gt; data = s-&gt;data;</span><br><span class="line">s-&gt;data = temp;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除节点操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p = <span class="built_in">GetElem</span>(L,i<span class="number">-1</span>);<span class="comment">//查找删除位置的前驱结点</span></span><br><span class="line">q = p-&gt;next; <span class="comment">//令q指向被删除结点</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//将*q结点从链中断开</span></span><br><span class="line"><span class="built_in">free</span>(q);<span class="comment">//释放结点的存储空间</span></span><br></pre></td></tr></table></figure>

<ul>
<li>删除结点 *p</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure>

<ul>
<li>求表长操作</li>
</ul>
<blockquote>
<p>带头结点和不带头结点是不同的</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (q != null) &#123;</span><br><span class="line">    count ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-双链表"><a href="#2-5-双链表" class="headerlink" title="2.5 双链表"></a>2.5 双链表</h3><blockquote>
<p>线性表的链式存储，增加了指向前驱的prior指针，双链表按位查找和按值查找与单链表相同,插入和删除的实现上有不同</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span> &#123;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior,*next;</span><br><span class="line">&#125; DNode,*DLinkList;</span><br></pre></td></tr></table></figure>

<ul>
<li>双链表的插入操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//将结点 *s 插入到 *p结点之后</span></span><br><span class="line">p -&gt; next -&gt;prior = s;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure>

<ul>
<li>双链表的删除操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-prior = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure>

<h3 id="2-6-循环链表"><a href="#2-6-循环链表" class="headerlink" title="2.6 循环链表"></a>2.6 循环链表</h3><h4 id="2-6-1-循环单链表"><a href="#2-6-1-循环单链表" class="headerlink" title="2.6.1 循环单链表"></a>2.6.1 循环单链表</h4><blockquote>
<p>最后一个结点的指针不是NULL，而改为指向头结点，判空判断是否为头指针，插入和删除和单链表一致，无需判断是否为表尾</p>
</blockquote>
<h4 id="2-6-2-循环双链表"><a href="#2-6-2-循环双链表" class="headerlink" title="2.6.2 循环双链表"></a>2.6.2 循环双链表</h4><blockquote>
<p>在循环双链表中，某结点 *p为尾结点时，p-&gt;next &#x3D;&#x3D; L;当循环双链表为空表时，其头结点的prior和next都等于L；</p>
</blockquote>
<h3 id="2-7-静态链表"><a href="#2-7-静态链表" class="headerlink" title="2.7 静态链表"></a>2.7 静态链表</h3><blockquote>
<p>静态链表借助数组来描述线性表的链式存储结构，结点也有data和next，next表示为相对地址【相当于数组下标】，叫游标，以next &#x3D;&#x3D; -1 作为结束的标志</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50<span class="comment">//静态链表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data;<span class="comment">//存储数据元素</span></span><br><span class="line">    <span class="type">int</span> next;<span class="comment">//下一个元素的数组下标</span></span><br><span class="line">&#125; SLinkList[MaxSize] </span><br></pre></td></tr></table></figure>

<h3 id="2-8-顺序表和链表的比较"><a href="#2-8-顺序表和链表的比较" class="headerlink" title="2.8 顺序表和链表的比较"></a>2.8 顺序表和链表的比较</h3><h4 id="2-8-1-存储（读写）方式"><a href="#2-8-1-存储（读写）方式" class="headerlink" title="2.8.1 存储（读写）方式"></a>2.8.1 存储（读写）方式</h4><blockquote>
<p>顺序表可以顺序存取，也可以随机存取，链表只能从表头顺序存取</p>
</blockquote>
<h4 id="2-8-2-逻辑与物理结构"><a href="#2-8-2-逻辑与物理结构" class="headerlink" title="2.8.2 逻辑与物理结构"></a>2.8.2 逻辑与物理结构</h4><blockquote>
<p>顺序存储，逻辑相邻，物理存储也相邻；链式存储，逻辑相邻，物理存储不一定相邻</p>
</blockquote>
<h4 id="2-8-3-查找、插入和删除操作"><a href="#2-8-3-查找、插入和删除操作" class="headerlink" title="2.8.3 查找、插入和删除操作"></a>2.8.3 查找、插入和删除操作</h4><h4 id="2-8-4-空间分配"><a href="#2-8-4-空间分配" class="headerlink" title="2.8.4 空间分配"></a>2.8.4 空间分配</h4><blockquote>
<p>顺序存储在静态存储分配情形下，不能够扩充，动态存储扩充需要移动大量的元素</p>
</blockquote>
<h3 id="2-9-栈和队列"><a href="#2-9-栈和队列" class="headerlink" title="2.9 栈和队列"></a>2.9 栈和队列</h3><h4 id="2-9-1-栈的属性"><a href="#2-9-1-栈的属性" class="headerlink" title="2.9.1 栈的属性"></a>2.9.1 栈的属性</h4><blockquote>
<p>栈是只允许在一端进行插入和删除操作的受限线性表，其操作的特性是后进先出【Last In First Out】LIFO</p>
</blockquote>
<ul>
<li>栈顶</li>
<li>栈底</li>
<li>空栈</li>
</ul>
<h4 id="2-9-2-栈的基本操作"><a href="#2-9-2-栈的基本操作" class="headerlink" title="2.9.2 栈的基本操作"></a>2.9.2 栈的基本操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">InitStack</span>(&amp;S) <span class="comment">//初始化一个栈</span></span><br><span class="line">   <span class="built_in">StackEmpty</span>(S)<span class="comment">//判空</span></span><br><span class="line">   <span class="built_in">Push</span>(&amp;S,x)<span class="comment">//进栈</span></span><br><span class="line">   <span class="built_in">Pop</span>(&amp;S,x)<span class="comment">//出栈</span></span><br><span class="line">   <span class="built_in">GetTop</span>(S,&amp;x)<span class="comment">//读栈顶元素</span></span><br><span class="line">   <span class="built_in">DestoryStack</span>(&amp;S)<span class="comment">//销毁栈</span></span><br></pre></td></tr></table></figure>

<h4 id="2-9-3-栈的顺序存储"><a href="#2-9-3-栈的顺序存储" class="headerlink" title="2.9.3 栈的顺序存储"></a>2.9.3 栈的顺序存储</h4><ul>
<li>顺序栈的实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;sqStack;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>栈顶指针 ：S.top,初始化时设置S.top &#x3D; -1 或者S.top &#x3D; 0,栈顶元素：S.data[S.top]</p>
</blockquote>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>判栈空</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>进栈</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈满</span></span><br><span class="line">    &#125;</span><br><span class="line">    S.data[++S.top] = x;<span class="comment">//指针先加1，再入栈,top指向栈顶</span></span><br><span class="line">    <span class="comment">//S.data[S.top++] = x; //top指向栈顶元素的下一个位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>出栈</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = S.data[S.top--];<span class="comment">//先出栈，指针减一，top指向栈顶</span></span><br><span class="line">    <span class="comment">//x = S.data[--S.top]//top指向栈顶元素的下一个位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>读栈顶元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = S.data[S.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-4-共享栈"><a href="#2-9-4-共享栈" class="headerlink" title="2.9.4 共享栈"></a>2.9.4 共享栈</h4><blockquote>
<p>利用栈底位置相对不变的特性，可让两个顺序栈共享一个一维数组空间</p>
</blockquote>
<h4 id="2-9-5-栈的链式存储结构"><a href="#2-9-5-栈的链式存储结构" class="headerlink" title="2.9.5 栈的链式存储结构"></a>2.9.5 栈的链式存储结构</h4><ul>
<li>链式存储</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Linknode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Linknode</span> *next;</span><br><span class="line">&#125; *LiStack;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>入栈与出栈都在链表的表头进行</p>
</blockquote>
<h4 id="2-9-6-队列的属性"><a href="#2-9-6-队列的属性" class="headerlink" title="2.9.6 队列的属性"></a>2.9.6 队列的属性</h4><blockquote>
<p>队列简称队，也是一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除，其操作特性是先进先出【First In First Out】FIFO</p>
</blockquote>
<ul>
<li>队列基本操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">InitQueue</span>(&amp;Q) <span class="comment">//初始化队列</span></span><br><span class="line">   <span class="built_in">QueueEmpty</span>(Q) <span class="comment">//判队列空</span></span><br><span class="line">   <span class="built_in">EnQueue</span>(&amp;Q,x)<span class="comment">//入队</span></span><br><span class="line">   <span class="built_in">DeQueue</span>(&amp;Q,&amp;x)<span class="comment">//出队</span></span><br><span class="line">   <span class="built_in">GetHead</span>(Q,&amp;x)<span class="comment">//读取头元素</span></span><br></pre></td></tr></table></figure>

<h4 id="2-9-7-队列的顺序存储"><a href="#2-9-7-队列的顺序存储" class="headerlink" title="2.9.7 队列的顺序存储"></a>2.9.7 队列的顺序存储</h4><ul>
<li>顺序队的实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//队头指针和队尾指针</span></span><br><span class="line">&#125; SqQueue；</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始状态（队空条件）：Q.front &#x3D;&#x3D; Q.rear &#x3D;&#x3D; 0</p>
<p>【入】进队操作：队不满时，先送值到队尾元素，队尾指针+1</p>
<p>【出】离队操作：队不空时，先取队头元素值，再将队头指针+1</p>
<p>顺序存储可能会造成假溢出的情况</p>
</blockquote>
<h4 id="2-9-8-循环队列"><a href="#2-9-8-循环队列" class="headerlink" title="2.9.8 循环队列"></a>2.9.8 循环队列</h4><ul>
<li>初始化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">  Q.front = Q.rear = <span class="number">0</span>；  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>判队空</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>入队</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span> </span>&#123;<span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MaxSize == Q.front) &#123; <span class="comment">//队满则报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.data[Q.rear] = x;</span><br><span class="line">    Q.rear = (Q.rear +<span class="number">1</span>) % Maxsize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>出队</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = data[Q.front];</span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-9-队列的链式存储"><a href="#2-9-9-队列的链式存储" class="headerlink" title="2.9.9 队列的链式存储"></a>2.9.9 队列的链式存储</h4><ul>
<li>链式存储的定义</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;<span class="comment">//链式队列结点</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkNode</span> *next;</span><br><span class="line">&#125;LinkNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));<span class="comment">//建立头结点</span></span><br><span class="line">    Q.front -&gt; next = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>判队空</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>入队</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType e)</span> </span>&#123;</span><br><span class="line">   LinkNode *s = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-next = null;</span><br><span class="line">    Q.rear-&gt;next = s;</span><br><span class="line">    Q.rear = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>出队</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkNode *p = Q.front -&gt; next;</span><br><span class="line">    x = p -&gt; data;</span><br><span class="line">    Q.front-&gt;next = p -&gt; next;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == p) &#123;</span><br><span class="line">        Q.rear = Q.front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-10-双端队列"><a href="#2-9-10-双端队列" class="headerlink" title="2.9.10 双端队列"></a>2.9.10 双端队列</h4><blockquote>
<p>双端队列是指允许两端都可以进行入队和出队的操作，逻辑结构仍是线性结构</p>
</blockquote>
<h4 id="2-9-11-栈和队列的应用"><a href="#2-9-11-栈和队列的应用" class="headerlink" title="2.9.11 栈和队列的应用"></a>2.9.11 栈和队列的应用</h4><ul>
<li><p>栈在括号匹配的应用</p>
</li>
<li><p>栈在表达式求值中的应用</p>
</li>
<li><p>栈在递归中的应用【通常情况下，减少了代码量，但效率不是太高】</p>
</li>
<li><p>队列在层次遍历中的应用</p>
</li>
<li><p>队列在计算机系统的应用</p>
<ul>
<li>解决主机和外部设备之间速度不匹配的问题</li>
<li>解决多用户引起的资源竞争问题</li>
</ul>
</li>
</ul>
<h4 id="2-9-12-特殊矩阵的压缩存储"><a href="#2-9-12-特殊矩阵的压缩存储" class="headerlink" title="2.9.12 特殊矩阵的压缩存储"></a>2.9.12 特殊矩阵的压缩存储</h4><ul>
<li>对称矩阵</li>
<li>三角矩阵</li>
<li>三对角矩阵</li>
<li>洗漱矩阵</li>
</ul>
<h2 id="3-串"><a href="#3-串" class="headerlink" title="3. 串"></a>3. 串</h2><h3 id="3-1-串的概念和属性"><a href="#3-1-串的概念和属性" class="headerlink" title="3.1 串的概念和属性"></a>3.1 串的概念和属性</h3><blockquote>
<p>串是由零个或者多个字符组成的有限序列</p>
</blockquote>
<ul>
<li><p>串中任意多个连续的字符组成的子序列称为该串的子串，包含子串的串称为主串</p>
</li>
<li><p>定长顺序存储表示</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SString;</span><br></pre></td></tr></table></figure>

<ul>
<li>堆分配存储表示</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">char</span> *ch;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;HString;</span><br></pre></td></tr></table></figure>

<ul>
<li>块链存储表示</li>
</ul>
<blockquote>
<p>类似于线性表的链式存储结构，也可采用链表方式的存储串值，最后一个结点占不满时用#补上；</p>
</blockquote>
<h3 id="3-2-串的基本操作"><a href="#3-2-串的基本操作" class="headerlink" title="3.2 串的基本操作"></a>3.2 串的基本操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">StrAssign</span>(&amp;T,chars)<span class="comment">//赋值操作</span></span><br><span class="line">   <span class="built_in">StrCopy</span>(&amp;T,S)<span class="comment">//复制操作</span></span><br><span class="line">   <span class="built_in">StrEmpty</span>(S)<span class="comment">//判空操作</span></span><br><span class="line">   <span class="built_in">StrCompare</span>(S,T)<span class="comment">//比较操作，S&gt;T,返回值&gt;0,S=T,返回值=0，S&lt;T,返回值&lt;0</span></span><br><span class="line">   <span class="built_in">StrLength</span>(S)<span class="comment">//求串长</span></span><br><span class="line">   <span class="built_in">SubString</span>(&amp;Sub,S,pos,len)<span class="comment">//求子串</span></span><br><span class="line">   <span class="built_in">Concat</span>(&amp;T,S1,S2)<span class="comment">//由T返回S1和S2联接而成的新串</span></span><br><span class="line">   <span class="built_in">Index</span>(S,T)<span class="comment">//定位操作</span></span><br><span class="line">   <span class="built_in">ClearString</span>(&amp;S)<span class="comment">//清空操作</span></span><br><span class="line">   <span class="built_in">DestoryString</span>(&amp;S)<span class="comment">//销毁串S</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-串的模式匹配"><a href="#3-3-串的模式匹配" class="headerlink" title="3.3 串的模式匹配"></a>3.3 串的模式匹配</h3><ul>
<li>简单的模式匹配算法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(SString S,SString T)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length &amp;&amp; j &lt;= T.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(S.<span class="built_in">ch</span>(i) == <span class="built_in">Tch</span>(j)) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - j + <span class="number">2</span>;</span><br><span class="line">            j = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; T.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - T.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>KMP算法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index_KMP</span><span class="params">(String S,String T,next[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length &amp;&amp; j &lt;= T.length) &#123;</span><br><span class="line">       <span class="keyword">if</span> (j == <span class="number">0</span> || S.ch[i] == T.ch[j]) &#123;</span><br><span class="line">           ++i;</span><br><span class="line">           ++j;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           j = next[j];</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; T.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - T.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>KMP算法进一步-nextval数组</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index_KMP</span><span class="params">(String S,String T,next[])</span> </span>&#123;</span><br><span class="line">	<span class="built_in">get_nextval</span>(String T,<span class="type">int</span> nextval[])</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_nextval</span><span class="params">(String T,<span class="type">int</span> nextval[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    nextval[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; T.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || T.ch[i] == T.ch[j]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            <span class="keyword">if</span> (T.ch[i] != T.ch[j]) &#123;</span><br><span class="line">                nextval[i] = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nextval[i] = nextval[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = nextval[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; T.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - T.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-树与二叉树"><a href="#4-树与二叉树" class="headerlink" title="4. 树与二叉树"></a>4. 树与二叉树</h2><h3 id="4-1-树的概念和属性"><a href="#4-1-树的概念和属性" class="headerlink" title="4.1 树的概念和属性"></a>4.1 树的概念和属性</h3><blockquote>
<p>树是指n(n&gt;&#x3D;0)个结点的有限值，树适合具有层次结构的数据</p>
</blockquote>
<ul>
<li>祖先 子孙 双亲 孩子 兄弟</li>
<li>结点的度 树的度</li>
</ul>
<blockquote>
<p>树中一个结点孩子的个数称之为该结点的度，树中结点的最大度数称之为树的度</p>
</blockquote>
<ul>
<li>分支结点【非终端结点】 叶子结点【终端结点】</li>
</ul>
<blockquote>
<p>度大于0 叫分支结点，度等于0叫叶子结点</p>
</blockquote>
<ul>
<li>深度 高度 层次</li>
</ul>
<blockquote>
<p>结点的层次从根开始定义，深度是从根节点自顶向下逐层累加，高度是从叶节点开始自底向上逐层累加</p>
</blockquote>
<ul>
<li>有序树 无序树</li>
</ul>
<blockquote>
<p>树中结点的各子树从左到右是有次序的，不能互换，称之为有序树，否则为无序树</p>
</blockquote>
<ul>
<li>路径和路径长度</li>
</ul>
<blockquote>
<p>路径是这两个结点之间所经过的结点序列构成，路径长度是指路径上所经过的边的个数</p>
</blockquote>
<ul>
<li>森林</li>
</ul>
<blockquote>
<p>森林是m(m&gt;&#x3D;0)棵互不相交的树的集合</p>
</blockquote>
<h3 id="4-2-二叉树的定义"><a href="#4-2-二叉树的定义" class="headerlink" title="4.2  二叉树的定义"></a>4.2  二叉树的定义</h3><blockquote>
<p>二叉树是一种树形结构，子树有左右之分，次序不能任意颠倒，每个结点至多有两棵子树</p>
</blockquote>
<ul>
<li>特殊二叉树<ul>
<li>满二叉树</li>
<li>完全二叉树</li>
<li>二叉排序树</li>
<li>平衡二叉树</li>
</ul>
</li>
</ul>
<h3 id="4-3-二叉树的存储结构"><a href="#4-3-二叉树的存储结构" class="headerlink" title="4.3 二叉树的存储结构"></a>4.3 二叉树的存储结构</h3><h4 id="4-3-1-顺序存储结构"><a href="#4-3-1-顺序存储结构" class="headerlink" title="4.3.1  顺序存储结构"></a>4.3.1  顺序存储结构</h4><blockquote>
<p>二叉树的顺序存储是指用一组地址连续的存储单元依次从上到下，从左到右存储完全二叉树上的结点元素</p>
</blockquote>
<ul>
<li>完全二叉树</li>
<li>满二叉树</li>
</ul>
<h4 id="4-3-2-链式存储结构"><a href="#4-3-2-链式存储结构" class="headerlink" title="4.3.2 链式存储结构"></a>4.3.2 链式存储结构</h4><blockquote>
<p>由于顺序存储的空间利用率比较低，因此二叉树一般采用链式存储结构</p>
</blockquote>
<ul>
<li>二叉树的链式存储结构</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span> &#123;</span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiTNode</span> *lchild,*rchid;<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-二叉树的遍历"><a href="#4-4-二叉树的遍历" class="headerlink" title="4.4 二叉树的遍历"></a>4.4 二叉树的遍历</h3><ul>
<li>先序遍历&lt;从上到下，从左到右&gt;</li>
</ul>
<blockquote>
<p>若二叉树为空，什么也不做，否则，访问根节点，先序遍历左子树，先序遍历右子树</p>
</blockquote>
<ul>
<li>递归</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != null) &#123;</span><br><span class="line">        <span class="built_in">visit</span>(T);<span class="comment">//访问根节点</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(T -&gt; lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(T -&gt; rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非递归</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder2</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    <span class="keyword">while</span>(p || !<span class="built_in">isEmpty</span>(S)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="built_in">visit</span>(p)</span><br><span class="line">            <span class="built_in">Push</span>(S,p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Pop</span>(S,p);</span><br><span class="line">            p = p -&gt; rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>中序遍历&lt;从左到右&gt;</li>
</ul>
<blockquote>
<p>若二叉树为空，什么也不做，否则，中序遍历左子树，访问根节点，中序遍历右子树</p>
</blockquote>
<ul>
<li>递归</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != null) &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(lchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">InOrder</span>(rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非递归</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder2</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    <span class="keyword">while</span>(p || !<span class="built_in">isEmpty</span>(S)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="built_in">Push</span>(S,p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Pop</span>(S,p);</span><br><span class="line">            <span class="built_in">visit</span>(p);</span><br><span class="line">            p = p -&gt; rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>后序遍历(从下到上，从左到右)</li>
</ul>
<blockquote>
<p>若二叉树为空，什么也不做，否则，后序遍历左子树，后序遍历右子树，访问根节点</p>
</blockquote>
<ul>
<li>递归</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != null) &#123;</span><br><span class="line">       <span class="built_in">PostOrder</span>(lchild);</span><br><span class="line">        <span class="built_in">PostOrder</span>(rchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非递归</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder2</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">InitStack</span>(S);</span><br><span class="line">   p = T;</span><br><span class="line">   r = null;</span><br><span class="line">    <span class="keyword">while</span>(p || !<span class="built_in">isEmpty</span>(S)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="built_in">Push</span>(S,p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">GetTop</span>(S,p);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild &amp;&amp; p-&gt;rchild != r) &#123;</span><br><span class="line">                p = p-&gt; rchild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">pop</span>(S,p);</span><br><span class="line">                <span class="built_in">visit</span>(p-&gt;data);</span><br><span class="line">                r = p;</span><br><span class="line">                p = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ul>
<li>层次遍历</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="built_in">EnQueue</span>(Q,T);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">IsEmpty</span>(Q)) &#123;</span><br><span class="line"> 		<span class="built_in">DeQueue</span>(Q,q);</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild != null) &#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(Q,p-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild != null) &#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(Q,p-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由遍历序列构造二叉树</li>
</ul>
<blockquote>
<p>由二叉树的先序序列和中序序列可以唯一确定一棵二叉树</p>
<p>由二叉树的后序序列和中序序列可以唯一确定一棵二叉树</p>
<p>由二叉树的层序序列和中序序列可以唯一确定一棵二叉树</p>
<p>只知道二叉树的先序序列和后序序列无法唯一确定一棵二叉树</p>
</blockquote>
<h3 id="4-5-线索二叉树"><a href="#4-5-线索二叉树" class="headerlink" title="4.5 线索二叉树"></a>4.5 线索二叉树</h3><h4 id="4-5-1-线索二叉树的定义"><a href="#4-5-1-线索二叉树的定义" class="headerlink" title="4.5.1 线索二叉树的定义"></a>4.5.1 线索二叉树的定义</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ThreadNode</span> *lchild,*rchild;<span class="comment">//左右孩子指针</span></span><br><span class="line">    <span class="type">int</span> ltag,rtag;<span class="comment">//左右线索标志</span></span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-2-中序线索二叉树的构造"><a href="#4-5-2-中序线索二叉树的构造" class="headerlink" title="4.5.2 中序线索二叉树的构造"></a>4.5.2 中序线索二叉树的构造</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InTread</span><span class="params">(ThreadTree &amp;p,ThreadTree &amp;pre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != null) &#123;</span><br><span class="line">       <span class="built_in">InTread</span>(p-&gt;lchild,pre);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild == null) &#123;</span><br><span class="line">            p-&gt;lchild = pre</span><br><span class="line">            p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre != null &amp;&amp; pre -&gt; rchild == null) &#123;</span><br><span class="line">            pre-rchild = p;</span><br><span class="line">            pre -&gt; rtag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        <span class="built_in">InTread</span>(p-&gt;rchild,pre);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-3-中序线索二叉树的遍历"><a href="#4-5-3-中序线索二叉树的遍历" class="headerlink" title="4.5.3 中序线索二叉树的遍历"></a>4.5.3 中序线索二叉树的遍历</h4><ul>
<li>中序线索二叉树中中序序列下的第一个结点</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadNode * <span class="title">Firstnode</span><span class="params">(ThreadNode *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;ltag == <span class="number">0</span>) &#123;</span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>中序线索二叉树中结点p在中序序列下的后继</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadNode *<span class="title">Nextnode</span><span class="params">(ThreadNode *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Firstnode</span>(p-&gt;rchild);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>利用上面两个算法，可以写出不含头结点的中序线索二叉树的中序遍历的算法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inorder</span><span class="params">(ThreadTree *T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ThreadNode *p = <span class="built_in">FirstNode</span>(T); p != null; p = <span class="built_in">Nextnode</span>(p)) &#123;</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-森林"><a href="#4-6-森林" class="headerlink" title="4.6 森林"></a>4.6 森林</h3><h4 id="4-6-1-树的存储结构"><a href="#4-6-1-树的存储结构" class="headerlink" title="4.6.1 树的存储结构"></a>4.6.1 树的存储结构</h4><ul>
<li>双亲表示法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100<span class="comment">//树最多结点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> parent;</span><br><span class="line">&#125;PTree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure>

<ul>
<li>孩子表示法</li>
<li>孩子兄弟表示法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">CSNode</span>&#123;</span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">CSNode</span> *firstchild,*nextsibling;<span class="comment">//第一个孩子和右兄弟指针</span></span><br><span class="line">&#125;CSNode,*CSTree;</span><br></pre></td></tr></table></figure>

<h4 id="4-6-2-树，森林，二叉树的转换"><a href="#4-6-2-树，森林，二叉树的转换" class="headerlink" title="4.6.2 树，森林，二叉树的转换"></a>4.6.2 树，森林，二叉树的转换</h4><ul>
<li>树转换为二叉树</li>
</ul>
<blockquote>
<p>&lt;1&gt; 在兄弟结点之间加一条连线</p>
<p>&lt;2&gt;对于每一个结点，只保留它与第一个孩子的连线，而与其他孩子的连线全部抹掉</p>
<p>&lt;3&gt;以树根为轴心，顺时针旋转45度</p>
</blockquote>
<ul>
<li>森林转换为二叉树</li>
</ul>
<blockquote>
<p>&lt;1&gt; 先将森林中每棵树转换为相应的二叉树</p>
<p>&lt;2&gt; 每棵树的根也可以视为兄弟关系，在每棵树的根之间加一根连线</p>
<p>&lt;3&gt; 以第一棵树的根为轴心顺时针旋转45度</p>
</blockquote>
<h4 id="4-6-3-树和森林的遍历"><a href="#4-6-3-树和森林的遍历" class="headerlink" title="4.6.3 树和森林的遍历"></a>4.6.3 树和森林的遍历</h4><ul>
<li><p>树的遍历</p>
<ul>
<li>先根遍历</li>
<li>后根遍历</li>
</ul>
</li>
<li><p>森林的遍历</p>
<ul>
<li>先序遍历森林</li>
<li>中序遍历森林【后根遍历】</li>
</ul>
</li>
</ul>
<h4 id="4-6-4-树与二叉树的应用"><a href="#4-6-4-树与二叉树的应用" class="headerlink" title="4.6.4 树与二叉树的应用"></a>4.6.4 树与二叉树的应用</h4><ul>
<li>二叉排序树【BST】</li>
<li>非递归查找算法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BSTNode *<span class="title">BST_Search</span><span class="params">(BiTree T,ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T != null &amp;&amp; key != T-&gt;data) 【</span><br><span class="line">        <span class="keyword">if</span>(key &lt; T-&gt;data) &#123;</span><br><span class="line">            T = T -&gt; lchild;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>二叉排序树的插入</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BST_Insert</span><span class="params">(BiTree &amp;T,KeyType k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == null) &#123;</span><br><span class="line">        T = (BiTree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BSTNode));</span><br><span class="line">        T -&gt; key = k;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild = Null;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k == T-&gt;key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; T-&gt; key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BST_Insert</span>(T-&gt;lchild,k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BST_Insert</span>(T-&gt;rchild,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>二叉排序树的构造</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Creat_BST</span><span class="params">(BiTree &amp;T,KeyType str[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    T = null;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="built_in">BST_Insert</span>(T,str[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>平衡二叉树</p>
</li>
<li><p>哈夫曼树和哈夫曼编码</p>
</li>
</ul>
<h2 id="5-图"><a href="#5-图" class="headerlink" title="5. 图"></a>5. 图</h2><blockquote>
<p>图不可以是空图，图的顶点集V一定非空</p>
</blockquote>
<h3 id="5-1-图的属性"><a href="#5-1-图的属性" class="headerlink" title="5.1 图的属性"></a>5.1 图的属性</h3><ul>
<li>有向图</li>
<li>无向图</li>
<li>简单图、多重图</li>
<li>完全图【简单完全图】</li>
<li>子图</li>
<li>连通，连通图，连通分量</li>
<li>强连通图，强连通分量</li>
<li>生成树，生成森林</li>
<li>顶点的度，入度和出度</li>
<li>边的权和网</li>
<li>稠密图、稀疏图</li>
<li>路径，路径长度和回路</li>
<li>简单路径、简单回路</li>
<li>距离</li>
<li>有向树</li>
</ul>
<h3 id="5-2-图的存储和操作"><a href="#5-2-图的存储和操作" class="headerlink" title="5.2 图的存储和操作"></a>5.2 图的存储和操作</h3><h4 id="5-2-1-邻接矩阵法"><a href="#5-2-1-邻接矩阵法" class="headerlink" title="5.2.1 邻接矩阵法"></a>5.2.1 邻接矩阵法</h4><ul>
<li>存储结构定义</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100 <span class="comment">//顶点项目的最大值</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;<span class="comment">//顶点的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;<span class="comment">//带权图中边上权值的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    VertexType Vex[MaxVertexNum];<span class="comment">//顶点表</span></span><br><span class="line">    EdgeType Edge[MaxVertexNum][MaxVertexNum]<span class="comment">//邻接矩阵，边表</span></span><br><span class="line">    <span class="type">int</span> vexnum,arcnum;<span class="comment">//图的当前顶点数和弧数 </span></span><br><span class="line">&#125;MGraph;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-邻接表法"><a href="#5-2-2-邻接表法" class="headerlink" title="5.2.2 邻接表法"></a>5.2.2 邻接表法</h4><ul>
<li>存储结构定义</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100 <span class="comment">//顶点项目的最大值</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span>&#123; <span class="comment">//边表结点</span></span><br><span class="line">    <span class="type">int</span> adjvex;<span class="comment">//该弧所指向的的顶点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> *next；<span class="comment">//指向下一条弧的指针</span></span><br><span class="line">   <span class="comment">//InfoType info;//网的边权值</span></span><br><span class="line">&#125;ArcNode；</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span>&#123;<span class="comment">//顶点表结点</span></span><br><span class="line">    VertexType data;<span class="comment">//顶点信息</span></span><br><span class="line">     ArcNode *first；<span class="comment">//指向第一条依附该顶点的</span></span><br><span class="line">&#125;VNode,AdjList[MaxVertexNum];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    AdjList vertices;<span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> vexnum,arcnum;<span class="comment">//图的顶点数和弧数</span></span><br><span class="line">&#125;ALGraph;<span class="comment">//ALGraph是以邻接表存储的图类型</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-3-十字链表"><a href="#5-2-3-十字链表" class="headerlink" title="5.2.3 十字链表"></a>5.2.3 十字链表</h4><h4 id="5-2-4-邻接多重表"><a href="#5-2-4-邻接多重表" class="headerlink" title="5.2.4 邻接多重表"></a>5.2.4 邻接多重表</h4><h3 id="5-3-图的基本操作"><a href="#5-3-图的基本操作" class="headerlink" title="5.3 图的基本操作"></a>5.3 图的基本操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Adjacent</span>(G,x,y)<span class="comment">//判断图是否存在边&lt;x,y&gt;或(x,y)</span></span><br><span class="line">   <span class="built_in">Neighbors</span>(G,x)<span class="comment">//列出图G中与结点x邻接的边</span></span><br><span class="line">   <span class="built_in">InsertVertex</span>(G,x)<span class="comment">//在图G中插入顶点x</span></span><br><span class="line">   <span class="built_in">DeleteVertex</span>(G,x)<span class="comment">//从图G中删除顶点x</span></span><br><span class="line">   <span class="built_in">AddEdge</span>(G,x,y)<span class="comment">//若无向边(x,y)或有向边&lt;x,y&gt;不存在，则向图G中添加该边</span></span><br><span class="line">   <span class="built_in">RemoveEdge</span>(G,x,y)<span class="comment">//若无向边(x,y)或有向边&lt;x,y&gt;存在，则向图G中删除该边</span></span><br><span class="line">   <span class="built_in">FirstNeighbor</span>(G,x)<span class="comment">//求图G中顶点x的第一个邻接点</span></span><br><span class="line">   <span class="built_in">NextNeighbor</span>(G,x，y)<span class="comment">//假设图G中顶点y是顶点x的一个邻接点，返回除y外顶点x的下一个邻接点的顶点号</span></span><br><span class="line">   <span class="built_in">Get_edge_value</span>(G,x,y)<span class="comment">//获取图G中边(x,y)或&lt;x,y&gt;对应的权值</span></span><br><span class="line">   <span class="built_in">Set_dege_value</span>(G,x,y,v)<span class="comment">//设置图G中边(x,y)或&lt;x,y&gt;对应的权值为v</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-图的遍历"><a href="#5-4-图的遍历" class="headerlink" title="5.4 图的遍历"></a>5.4 图的遍历</h3><h4 id="5-4-1-广度优先搜索【Breadth-First-Search-BFS】"><a href="#5-4-1-广度优先搜索【Breadth-First-Search-BFS】" class="headerlink" title="5.4.1 广度优先搜索【Breadth-First-Search,BFS】"></a>5.4.1 广度优先搜索【Breadth-First-Search,BFS】</h4><blockquote>
<p>类似树的层序遍历算法</p>
</blockquote>
<ul>
<li>伪代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vertex_num];<span class="comment">//访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum;++i) &#123;</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i]) &#123;</span><br><span class="line">            <span class="built_in">BFS</span>(G,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">enqueue</span>(Q,v);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(Q)) &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q,v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[w]) &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">Enqueue</span>(Q,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-4-2-深度优先搜索【Depth-First-Search，DFS】"><a href="#5-4-2-深度优先搜索【Depth-First-Search，DFS】" class="headerlink" title="5.4.2 深度优先搜索【Depth-First-Search，DFS】"></a>5.4.2 深度优先搜索【Depth-First-Search，DFS】</h4><blockquote>
<p>类似树的先序遍历</p>
</blockquote>
<ul>
<li>伪代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_verTex_Num];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(v = <span class="number">0</span>; v &lt; G.vexnum; ++v) &#123;</span><br><span class="line">        visited[v] = <span class="literal">false</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(v = <span class="number">0</span>; v &lt; G.vexnum; ++v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[v]) &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(G,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(w = <span class="built_in">FirstNeighbor</span>(G,r); w &gt;= <span class="number">0</span>; w = <span class="built_in">NextNeighbor</span>(G,v，w)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[w]) &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(G,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>图的遍历与图的连通性</li>
</ul>
<h3 id="5-5-图的应用"><a href="#5-5-图的应用" class="headerlink" title="5.5 图的应用"></a>5.5 图的应用</h3><ul>
<li><p>最小生成树</p>
<ul>
<li>Prim算法</li>
<li>Kruskal算法</li>
</ul>
</li>
<li><p>最短路径</p>
<ul>
<li>Dijkstra算法求单源最短路径问题</li>
<li>Floyd算法求各顶点之间最短路径问题</li>
</ul>
</li>
<li><p>有向无环图描述表达式</p>
</li>
<li><p>拓扑排序</p>
</li>
<li><p>关键路径</p>
</li>
</ul>
<h2 id="6-查找"><a href="#6-查找" class="headerlink" title="6. 查找"></a>6. 查找</h2><blockquote>
<p>在数据集合中寻找满足某种条件的数据元素的过程称为查找</p>
</blockquote>
<h3 id="6-1-查找的属性"><a href="#6-1-查找的属性" class="headerlink" title="6.1 查找的属性"></a>6.1 查找的属性</h3><ul>
<li>查找表【查找结构】</li>
</ul>
<blockquote>
<p>用于查找的数据集合</p>
</blockquote>
<ul>
<li>静态查找表</li>
<li>关键字</li>
<li>平均查找长度</li>
</ul>
<h3 id="6-2-顺序查找"><a href="#6-2-顺序查找" class="headerlink" title="6.2 顺序查找"></a>6.2 顺序查找</h3><ul>
<li>一般线性表的顺序查找</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="type">int</span> TableLen;</span><br><span class="line">&#125;SStable;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST,Elemtype key)</span> </span>&#123;</span><br><span class="line">    St.elem[<span class="number">0</span>] = key;<span class="comment">//哨兵 提高程序效率</span></span><br><span class="line">    <span class="keyword">for</span>(i = ST.TableLen;ST.elem[i] != key;--i) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有序表的顺序查找</li>
<li>折半查找【二分查找】</li>
</ul>
<blockquote>
<p>仅适用于有序的顺序表</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_Search</span><span class="params">(SeqList L，ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>,high = L.TabLen - <span class="number">1</span>,mid;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (L.elem[mid] &gt; key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分块查找【索引顺序查找】</li>
</ul>
<h3 id="6-3-B树和B-树"><a href="#6-3-B树和B-树" class="headerlink" title="6.3 B树和B+树"></a>6.3 B树和B+树</h3><h4 id="6-3-1-B树的属性"><a href="#6-3-1-B树的属性" class="headerlink" title="6.3.1 B树的属性"></a>6.3.1 B树的属性</h4><blockquote>
<p>B树，多路平衡查找树</p>
</blockquote>
<ul>
<li>B树的高度(磁盘存取次数)</li>
<li>B树的查找</li>
</ul>
<blockquote>
<p>在B树中找结点，在结点内找关键词</p>
</blockquote>
<ul>
<li>B树的插入</li>
<li>B树的删除</li>
</ul>
<h4 id="6-3-2-B-树的基本概念"><a href="#6-3-2-B-树的基本概念" class="headerlink" title="6.3.2 B+树的基本概念"></a>6.3.2 B+树的基本概念</h4><blockquote>
<p>B+树是应数据库所需而出现的一种B树的变形树</p>
</blockquote>
<p>一棵m阶的B+树需满足下列条件：</p>
<ul>
<li>每个分支结点最多有m棵子树(孩子结点)</li>
<li>非叶根结点至少有两棵子树，其他每个分支结点至少有[m&#x2F;2]棵子树</li>
<li>结点子树的个数与关键字个数相等</li>
<li>所有叶节点包含全部关键字及指向相应记录的指针，叶结点中将关键字按大小顺序排列，并且相邻叶结点按大小顺序相互链接起来</li>
<li>所有分支结点(可视为索引的索引)中仅包含它的各个子结点(即下一级的索引块)中关键字的最大值及指向其子结点的指针</li>
</ul>
<h3 id="6-4-散列表"><a href="#6-4-散列表" class="headerlink" title="6.4 散列表"></a>6.4 散列表</h3><blockquote>
<p>根据关键字而直接进行访问的数据结构</p>
</blockquote>
<h4 id="6-4-1-散列表的构造方法"><a href="#6-4-1-散列表的构造方法" class="headerlink" title="6.4.1 散列表的构造方法"></a>6.4.1 散列表的构造方法</h4><ul>
<li>直接定址法</li>
</ul>
<blockquote>
<p>H(key) &#x3D; key 或H(key) &#x3D; a*key + b</p>
</blockquote>
<ul>
<li>除留余数法</li>
</ul>
<blockquote>
<p>H(key) &#x3D; key % p</p>
</blockquote>
<ul>
<li>数字分析法</li>
<li>平方取中法</li>
</ul>
<h4 id="6-4-2-处理冲突的方法"><a href="#6-4-2-处理冲突的方法" class="headerlink" title="6.4.2 处理冲突的方法"></a>6.4.2 处理冲突的方法</h4><ul>
<li><p>开放定址法</p>
<ul>
<li>线性探测法</li>
<li>平方探测法</li>
<li>再散列法</li>
<li>伪随机序列法</li>
</ul>
</li>
<li><p>拉链法【链接法，chaining】</p>
</li>
</ul>
<h2 id="7-排序"><a href="#7-排序" class="headerlink" title="7. 排序"></a>7. 排序</h2><blockquote>
<p>就是重新排列表中的元素，通常由比较和移动，分为插入排序、交换排序、选择排序、归并排序、基数排序，大部分排序算法仅适用于顺序存储的线性表</p>
</blockquote>
<h3 id="7-1-插入排序"><a href="#7-1-插入排序" class="headerlink" title="7.1 插入排序"></a>7.1 插入排序</h3><ul>
<li>普通插入排序</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(ElemType A[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt; A[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            A[<span class="number">0</span>] = A[i];<span class="comment">//哨兵</span></span><br><span class="line">        	<span class="keyword">for</span> (<span class="type">int</span> j= i <span class="number">-1</span>;A[<span class="number">0</span>] &lt; A[j];--j) &#123;</span><br><span class="line">                A[j+<span class="number">1</span>] = A[j];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            A[j+<span class="number">1</span>] = A[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>折半插入排序</li>
</ul>
<blockquote>
<p>稳定的排序方法</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(ElemType A[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,low,high,mid;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        A[<span class="number">0</span>] = A[i];</span><br><span class="line">        low = <span class="number">1</span>;</span><br><span class="line">        high = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[mid] &gt; A[<span class="number">0</span>]) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= high + <span class="number">1</span>; --j) &#123;</span><br><span class="line">            A[j+<span class="number">1</span>] = A[j];</span><br><span class="line">        &#125;</span><br><span class="line">        A[high+<span class="number">1</span>] = A[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>希尔排序【缩小增量排序】</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(ElemType A[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (dk = n/<span class="number">2</span>;dk&gt;=<span class="number">1</span>;dk = dk/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = dk + <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span>(A[i] &lt; A[i-dk]) &#123;</span><br><span class="line">                A[<span class="number">0</span>] = A[i];</span><br><span class="line">                <span class="keyword">for</span>(j = i - dk; j&gt;<span class="number">0</span>&amp;&amp;A[<span class="number">0</span>] &lt; A[j];j-=dk)  &#123;</span><br><span class="line">                    A[j + dk] = A[j];</span><br><span class="line">                &#125;</span><br><span class="line">                A[j + dk] = A[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-交换排序"><a href="#7-2-交换排序" class="headerlink" title="7.2 交换排序"></a>7.2 交换排序</h3><ul>
<li>冒泡排序</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(ElemType A[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line"> 		<span class="keyword">for</span>(j = n <span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j<span class="number">-1</span>] &gt; A[j]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(A[j<span class="number">-1</span>],A[j]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>快速排序</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pivotpos = <span class="built_in">Partition</span>(A,low,high);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,low,pivotpos <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,pivotpos + <span class="number">1</span>，high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    ElemType pivot = A[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; A[high] &gt;= pivot) &#123;</span><br><span class="line">            --high;</span><br><span class="line">        &#125;</span><br><span class="line">        A[low] = A[high];</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; A[low] &lt;= pivot) &#123;</span><br><span class="line">            ++low;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-选择排序"><a href="#7-3-选择排序" class="headerlink" title="7.3 选择排序"></a>7.3 选择排序</h3><ul>
<li>简单选择排序</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(ElemType A[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span>(j = i +<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j] &lt; A[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(min != i) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(A[i],A[min]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>堆排序</li>
<li>建立大根堆</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildMaxHeap</span><span class="params">(ElemType A[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len/<span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">HeadAdjust</span>(A,i,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeadAdjust</span><span class="params">(ElemType A[],<span class="type">int</span> k,<span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        A[<span class="number">0</span>] = A[k];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">2</span>*k; i &lt;= len; i *= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len &amp;&amp; A[i] &lt; A[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(A[<span class="number">0</span>] &gt;= A[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                A[k] = A[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    A[k] = A[<span class="number">0</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>堆排序算法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(ElemType A[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BuildMaxHeap</span>(A,len);</span><br><span class="line">    <span class="keyword">for</span>(i = len; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(A[i],A[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">HeadAdjust</span>(A,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>堆排序是一种不稳定的排序方法</p>
</blockquote>
<h3 id="7-4-归并排序和基数排序"><a href="#7-4-归并排序和基数排序" class="headerlink" title="7.4 归并排序和基数排序"></a>7.4 归并排序和基数排序</h3><ul>
<li>归并排序</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ElemType *B = (ElemType *)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="built_in">sizeof</span>(ElemType));</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = low; k &lt;= high;k++) &#123;</span><br><span class="line">        B[k] = A[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = low,j = mid + <span class="number">1</span>,k = i;i &lt;= mid &amp;&amp; j &lt;= high; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] &lt; B[j]) &#123;</span><br><span class="line">            A[k] = B[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            A[k] = B[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) &#123;</span><br><span class="line">        A[k++] = B[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= high) &#123;</span><br><span class="line">        A[k++] = B[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的代码中，只有一个while会执行</p>
</blockquote>
<ul>
<li>合并</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergSort</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(A,low,mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(A,mid + <span class="number">1</span>,high);</span><br><span class="line">        <span class="built_in">Merge</span>(A,low,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-5-各种内部排序算法的比较"><a href="#7-5-各种内部排序算法的比较" class="headerlink" title="7.5 各种内部排序算法的比较"></a>7.5 各种内部排序算法的比较</h3><table>
<thead>
<tr>
<th>序号</th>
<th>算法种类</th>
<th>时间复杂度最好情况</th>
<th>时间复杂度平均情况</th>
<th>时间复杂度最坏情况</th>
<th>空间复杂度</th>
<th>是否稳定</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>直接插入排序</td>
<td>O(n)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>是</td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序</td>
<td>O(n)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>是</td>
</tr>
<tr>
<td>3</td>
<td>简单选择排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>否</td>
</tr>
<tr>
<td>4</td>
<td>希尔排序</td>
<td></td>
<td></td>
<td></td>
<td>O(1)</td>
<td>否</td>
</tr>
<tr>
<td>5</td>
<td>快速排序</td>
<td>O(nlog2n)</td>
<td>O(nlog2n)</td>
<td>O(n^2)</td>
<td>O(nlog2n)</td>
<td>否</td>
</tr>
<tr>
<td>6</td>
<td>堆排序</td>
<td>O(nlog2n)</td>
<td>O(nlog2n)</td>
<td>O(nlog2n)</td>
<td>O(1)</td>
<td>否</td>
</tr>
<tr>
<td>7</td>
<td>2路归并排序</td>
<td>O(nlog2n)</td>
<td>O(nlog2n)</td>
<td>O(nlog2n)</td>
<td>O(n)</td>
<td>是</td>
</tr>
<tr>
<td>8</td>
<td>基数排序</td>
<td>O(d(n+r))</td>
<td>O(d(n+r))</td>
<td>O(d(n+r))</td>
<td>O(r)</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="7-6-外部排序"><a href="#7-6-外部排序" class="headerlink" title="7.6 外部排序"></a>7.6 外部排序</h3><blockquote>
<p>外部排序是指待排序文件较大，内存一次放不下，需存放在外存的文件的排序，通常采用归并排序法</p>
</blockquote>
<ul>
<li>外部排序的总时间 &#x3D; 内部排序的所需时间 + 外存信息读写的时间 + 内部归并所需的时间</li>
<li>多路平衡归并与败者树</li>
<li>置换选择排序</li>
<li>最佳归并树</li>
</ul>
<h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>这次对于数据结构有了基本的了解，自己不知道的东西还是有许多的。</p>
]]></content>
      <tags>
        <tag>思想</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理初识</title>
    <url>/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<center>沧海一桑田，蓦然半回首</center>
</blockquote>
<p><escape><span id="more"></span></escape></p>
<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><h3 id="1-1-发展"><a href="#1-1-发展" class="headerlink" title="1.1 发展"></a>1.1 发展</h3><ul>
<li>第一代(1946-1957) 电子管时代</li>
<li>第二代(1958-1964) 晶体管时代</li>
<li>第三代(1965-1971) 中小规模集成电路时代</li>
<li>第四代(1972-至今) 超大规模集成电路时代</li>
</ul>
<h3 id="1-2-元件"><a href="#1-2-元件" class="headerlink" title="1.2 元件"></a>1.2 元件</h3><ul>
<li>摩尔定律</li>
<li>半导体存储器的发展</li>
<li>微处理器的发展</li>
</ul>
<h3 id="1-3-分类与方向"><a href="#1-3-分类与方向" class="headerlink" title="1.3 分类与方向"></a>1.3 分类与方向</h3><h4 id="1-3-1-按照用途"><a href="#1-3-1-按照用途" class="headerlink" title="1.3.1 按照用途"></a>1.3.1 按照用途</h4><ul>
<li>电子模拟计算机</li>
<li>电子数字计算机<ul>
<li>专用计算机</li>
<li>通用计算机<ul>
<li>巨型机</li>
<li>大型机</li>
<li>中型机</li>
<li>小型机</li>
<li>微型机</li>
<li>单片机</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="1-3-2-按照指令和数据流"><a href="#1-3-2-按照指令和数据流" class="headerlink" title="1.3.2 按照指令和数据流"></a>1.3.2 按照指令和数据流</h4><ul>
<li>单指令流和单数据流(SISD):冯诺依曼结构</li>
<li>单指令流和多数据流(SIMD):包括阵列处理器和向量处理器系统</li>
<li>多指令流和单数据流(MISD):这种计算机实际上不存在</li>
<li>多指令流和多数据流(MIMD):包括多处理器和多计算机系统</li>
</ul>
<h4 id="1-3-3-方向"><a href="#1-3-3-方向" class="headerlink" title="1.3.3 方向"></a>1.3.3 方向</h4><ul>
<li>微型计算机，微型化、网络化、高性能、多用途方向发展</li>
<li>巨型计算机：巨型化、超高速、并行处理、智能化发展</li>
</ul>
<h3 id="1-4-计算机组成"><a href="#1-4-计算机组成" class="headerlink" title="1.4 计算机组成"></a>1.4 计算机组成</h3><h4 id="1-4-1-冯诺依曼机"><a href="#1-4-1-冯诺依曼机" class="headerlink" title="1.4.1 冯诺依曼机"></a>1.4.1 冯诺依曼机</h4><ul>
<li>计算机硬件由运算器、控制器、存储器、输入设备、输出设备</li>
<li>指令和数据以同等地位存储在存储器中，并可以按照地址寻访</li>
<li>指令和数据均用二进制代码表示</li>
<li>指令由操作码和地址码组成，操作码指出操作的类型，地址码指出操作数的地址</li>
<li>指令在存储器中按顺序存放，通常指令顺序执行，特定情况下根据运算结果和根据设定的条件改变执行顺序</li>
<li>早期的冯诺依曼以运算器为中心，，输入输出通过运算器与存储器传送数据，现代以存储器为中心，尽可能绕开CPU</li>
</ul>
<h4 id="1-4-2-功能部件"><a href="#1-4-2-功能部件" class="headerlink" title="1.4.2 功能部件"></a>1.4.2 功能部件</h4><ul>
<li>输入设备</li>
<li>输出设备</li>
<li>存储器</li>
</ul>
<blockquote>
<p>主存储器【主存，内存储器】，辅助存储器【辅存，外存储器】，地址寄存器【MAR】和高速缓存【Cache】现代是存在CPU中</p>
<p>数据寄存器【MDR】，时序控制逻辑</p>
</blockquote>
<ul>
<li>运算器</li>
</ul>
<blockquote>
<p>算术运算和逻辑运算，核心是算术逻辑单元【ALU】，若干寄存器：累加器【ACC】、乘商寄存器【MQ】、操作数寄存器【X】、变址寄存器【IX】、基址寄存器【BR】、程序状态寄存器【PSW】，前面3个寄存器是必须的</p>
</blockquote>
<ul>
<li>控制器</li>
</ul>
<blockquote>
<p>由程序计数器【PC】、指令寄存器【IR】和控制单元【CU】组成</p>
</blockquote>
<h4 id="1-4-3-计算机软件分类"><a href="#1-4-3-计算机软件分类" class="headerlink" title="1.4.3 计算机软件分类"></a>1.4.3 计算机软件分类</h4><ul>
<li>系统软件</li>
</ul>
<blockquote>
<p>操作系统【OS】、数据库管理系统【DBMS】、语言处理程序、分布式软件系统、网络软件系统、标准库程序、服务性程序</p>
</blockquote>
<ul>
<li>应用软件</li>
</ul>
<blockquote>
<p>科学计算类、工程设计类</p>
</blockquote>
<h4 id="1-4-4-计算机语言"><a href="#1-4-4-计算机语言" class="headerlink" title="1.4.4 计算机语言"></a>1.4.4 计算机语言</h4><ul>
<li>机器语言</li>
<li>汇编语言</li>
<li>高级语言</li>
</ul>
<h4 id="1-4-5-计算机工作过程"><a href="#1-4-5-计算机工作过程" class="headerlink" title="1.4.5 计算机工作过程"></a>1.4.5 计算机工作过程</h4><ul>
<li>把程序和数据装入主存储器</li>
<li>将源程序转换成可执行文件</li>
</ul>
<blockquote>
<p>一般是预处理阶段，编译阶段，汇编阶段，链接阶段</p>
</blockquote>
<ul>
<li>从可执行文件的首地址开始逐条执行指令</li>
</ul>
<blockquote>
<ol>
<li><p>取指令：PC-MAR-M-MDR-IR</p>
</li>
<li><p>分析指令：OP(IR)-CU</p>
</li>
<li><p>执行指令：Ad(IR)-MAR-M-MDR-ACC</p>
</li>
<li><p>pc+1-pc</p>
</li>
</ol>
</blockquote>
<h4 id="1-4-6-多级层次结构"><a href="#1-4-6-多级层次结构" class="headerlink" title="1.4.6 多级层次结构"></a>1.4.6 多级层次结构</h4><ul>
<li><p>硬件层</p>
</li>
<li><p>微程序机器层</p>
</li>
<li><p>传统机器语言层</p>
</li>
<li><p>操作系统层</p>
</li>
<li><p>汇编语言层</p>
</li>
<li><p>高级语言层</p>
</li>
</ul>
<h3 id="1-5-主要性能指标"><a href="#1-5-主要性能指标" class="headerlink" title="1.5 主要性能指标"></a>1.5 主要性能指标</h3><ul>
<li>机器字长</li>
<li>数据通路带宽</li>
<li>主存容量</li>
<li>运算速度</li>
</ul>
<blockquote>
<p>吞吐量</p>
<p>响应时间</p>
</blockquote>
<ul>
<li>主频和Cpu时钟周期</li>
<li>基准程序</li>
</ul>
<h3 id="1-6-专业术语"><a href="#1-6-专业术语" class="headerlink" title="1.6 专业术语"></a>1.6 专业术语</h3><ul>
<li>系列机</li>
<li>兼容</li>
<li>软件可移植性</li>
<li>固件</li>
</ul>
<h2 id="2-数据的表示和运算"><a href="#2-数据的表示和运算" class="headerlink" title="2. 数据的表示和运算"></a>2. 数据的表示和运算</h2><h3 id="2-1-进位计数制及其相互转换"><a href="#2-1-进位计数制及其相互转换" class="headerlink" title="2.1 进位计数制及其相互转换"></a>2.1 进位计数制及其相互转换</h3><ul>
<li>二进制(2^1)</li>
<li>三进制(3^1)</li>
<li>四进制(2^2)</li>
<li>八进制(2^3)</li>
<li>九进制(3^2)</li>
<li>十进制</li>
<li>十六进制(2^4,ABCDEF)</li>
</ul>
<blockquote>
<p>1111000010.01101 二进制 转换为八进制和十六进制，八进制取3位，十六进制取4位</p>
<p>（1702.32）8 &#x3D; （1111000010.01101）2 </p>
<p>（3C2.68）16 &#x3D; (1111000010.01101）2 </p>
</blockquote>
<blockquote>
<p>不是每个十进制小数都可以准确的用二进制表示，但所有的二进制都可以用十进制表示</p>
</blockquote>
<h3 id="2-2-真值和机器数"><a href="#2-2-真值和机器数" class="headerlink" title="2.2 真值和机器数"></a>2.2 真值和机器数</h3><blockquote>
<p>+15真值这种是机器数0101所代表的实际值</p>
</blockquote>
<h3 id="2-3-BCD码"><a href="#2-3-BCD码" class="headerlink" title="2.3 BCD码"></a>2.3 BCD码</h3><blockquote>
<p>通常采用四位二进制数来表示一位十进制的一个数</p>
</blockquote>
<ul>
<li>8421</li>
</ul>
<blockquote>
<p>有权码</p>
</blockquote>
<ul>
<li>余3码</li>
<li>2421码</li>
</ul>
<h3 id="2-4-字符与字符串"><a href="#2-4-字符与字符串" class="headerlink" title="2.4 字符与字符串"></a>2.4 字符与字符串</h3><ul>
<li>字符编码Ascall码</li>
<li>GB18030</li>
</ul>
<h3 id="2-5-校验码"><a href="#2-5-校验码" class="headerlink" title="2.5 校验码"></a>2.5 校验码</h3><ul>
<li>奇偶校验码</li>
<li>海明校验码</li>
<li>循环冗余校验码【CRC】</li>
</ul>
<h3 id="2-6-定点数的表示与运算"><a href="#2-6-定点数的表示与运算" class="headerlink" title="2.6 定点数的表示与运算"></a>2.6 定点数的表示与运算</h3><h4 id="2-6-1-定点数的表示"><a href="#2-6-1-定点数的表示" class="headerlink" title="2.6.1 定点数的表示"></a>2.6.1 定点数的表示</h4><ul>
<li>定点小数</li>
<li>定点整数</li>
</ul>
<h4 id="2-6-2-原码、补码、反码、移码"><a href="#2-6-2-原码、补码、反码、移码" class="headerlink" title="2.6.2 原码、补码、反码、移码"></a>2.6.2 原码、补码、反码、移码</h4><blockquote>
<p>小数点求二进制，乘以2 &gt;1取1不大于1取0</p>
</blockquote>
<ul>
<li><p>原码表示法</p>
<ul>
<li>纯小数的原码：[x]原 &#x3D; {x    1&gt;x&gt;&#x3D;0},{1-x &#x3D; 1+ |x|      0&gt;&#x3D;x&gt;-1}</li>
<li>纯整数的原码：[x]原 &#x3D; {0,x   2^n &gt; x &gt;&#x3D;0},{2^n-x &#x3D; 2^n + |x|  0 &gt;&#x3D; x &gt;-2^n}</li>
</ul>
<blockquote>
<p>真值0的原码有正0和负0的区别 即[+0]原 &#x3D; 00000 [-0]原 &#x3D; 10000</p>
</blockquote>
</li>
<li><p>补码表示法【可以将原码加减法统一采用加法操作实现,取反加1】</p>
<ul>
<li>纯小数的补码定义：[x]补 &#x3D; {x  1&gt;x&gt;&#x3D;0},{2+x &#x3D; 2-|x|  0&gt;x&gt;&#x3D;-1}</li>
<li>纯整数的补码定义: [x]补 &#x3D; {0,x   2^n &gt;x&gt;&#x3D;0},{2^(n+1) + x &#x3D; 2^(n+1) - |x|  0 &gt;&#x3D;x&gt;&#x3D;-2^n}</li>
</ul>
</li>
<li><p>反码表示法【通常用来作为原码求补码，或补码求原码的中间过渡】</p>
<ul>
<li><p>纯小数的反码定义：[x]反 &#x3D; {x 1&gt;x&gt;&#x3D;0},{(2-2^-n) + x  0&gt;&#x3D;x&gt;-1}</p>
</li>
<li><p>纯整数的反码定义：[x]反 &#x3D; {0,x 2^n &gt; x &gt;&#x3D;0},{(2^(n+1)) + x 0 &gt;&#x3D; x &gt;-2^n}												</p>
<blockquote>
<p>真值0的反码表示不唯一，例如[+0]反 &#x3D; 0.0000；[-0]反 &#x3D; 1.1111；</p>
</blockquote>
</li>
</ul>
</li>
<li><p>移码表示法</p>
</li>
</ul>
<blockquote>
<p>移码常用来表示浮点数的阶码，它只能表示整数</p>
</blockquote>
<h4 id="2-6-3-定点数的运算"><a href="#2-6-3-定点数的运算" class="headerlink" title="2.6.3 定点数的运算"></a>2.6.3 定点数的运算</h4><ul>
<li>定点数的移位运算</li>
<li>算术移位</li>
</ul>
<blockquote>
<p>对于正数，由于[x]原 &#x3D; [x]补 &#x3D; [x]反 &#x3D; 真值，添补0</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>数值</th>
<th>码制</th>
<th>添补代码</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>正数</td>
<td>原码、补码、反码</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>负数</td>
<td>原码</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>负数</td>
<td>补码左移</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>负数</td>
<td>补码右移</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>负数</td>
<td>反码</td>
<td>1</td>
</tr>
</tbody></table>
<ul>
<li>逻辑移位</li>
</ul>
<blockquote>
<p>逻辑移位不管左移还是右移添加的都是0，逻辑移位将操作数视为无符号数，移位规则：逻辑左移时，高位移丢，低位添0；逻辑右移时，低位移丢，高位添0</p>
</blockquote>
<ul>
<li>循环移位</li>
</ul>
<blockquote>
<p>分为带进位标志位CF的循环移位(大循环)和不带进位标志位的循环移位(小循环)，特别适合将数据的低字节数据和高字节数据互换</p>
</blockquote>
<ul>
<li><p>原码定点数的加减法运算</p>
<ul>
<li><p>加法规则：先判符号位，若相同，则绝对值相加，结果符号位不变，若不同，则做减法，绝对值大的数减去绝对值小的数，结果符号位与绝对值大的数相同</p>
</li>
<li><p>减法规则：两个原码表示的数相减，首先将减数符号取反，然后将被减数与符号取反后的减数按原码加法进行运算</p>
</li>
</ul>
<blockquote>
<p>运算时注意机器字长，当左边位出现溢出时，将溢出位丢掉</p>
</blockquote>
</li>
<li><p>补码定点数加减法运算</p>
<ul>
<li>加法：两数的补码直接相加</li>
<li>减法：将被减数与减数的机器负数相加</li>
</ul>
</li>
</ul>
<blockquote>
<p>补码运算的结果亦为补码</p>
</blockquote>
<ul>
<li>符号扩展</li>
</ul>
<blockquote>
<p>8位数和32位数相加，必须将8位数转换为32位数</p>
</blockquote>
<ul>
<li>溢出概念和判断方法</li>
</ul>
<blockquote>
<p>溢出是指运算结果超出了数的表示范围，仅当两个符号相同的数相加或两个符号相异的数相减才可能产生溢出</p>
</blockquote>
<ul>
<li><p>补码定点数加减法溢出判断的方法</p>
<ul>
<li>采用一位符号位</li>
<li>采用双符号位</li>
<li>采用一号符号位根据数据位的进位情况判断溢出</li>
</ul>
</li>
<li><p>定点数的乘法运算</p>
</li>
</ul>
<blockquote>
<p>乘法运算由累加和右移操作实现，根据机器数的不同，可分为原码一位乘法，和补码一位乘法</p>
</blockquote>
<ul>
<li>原码一位乘法</li>
</ul>
<blockquote>
<p>符号位和数值位分开，乘积符号由两个数的符号位“异或”形成，而乘积的数值部分则是两个数的绝对值相乘之积，因此原码一位乘法运算过程中的右移操作均为逻辑右移，考虑运算时出现绝对值大于1却没有溢出，所以部分积和被乘数取双符号位</p>
</blockquote>
<ul>
<li>补码一位乘法(Booth算法)</li>
</ul>
<blockquote>
<p>这是一种有符号数的乘法，采用相加和相减操作计算补码数据的乘积</p>
</blockquote>
<ul>
<li>表1 Booth算法的移位规则</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>yn（高位）</th>
<th>y(n+1)(低位)</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>部分积右移一位</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>1</td>
<td>部分积加[x]补，右移一位</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>0</td>
<td>部分积加[-x]补，右移一位</td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>1</td>
<td>部分积右移一位</td>
</tr>
</tbody></table>
<ul>
<li>表2 乘法运算总结</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>乘法类型</th>
<th>符号位参与运算</th>
<th>符号位部分积</th>
<th>符号位乘数</th>
<th>累加次数</th>
<th>移位方向</th>
<th>移位次数</th>
<th>移位每位次数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>原码一位乘法</td>
<td>否</td>
<td>2位</td>
<td>0位</td>
<td>n</td>
<td>右</td>
<td>n</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>补码一位乘法</td>
<td>是</td>
<td>2位</td>
<td>1位</td>
<td>n+1</td>
<td>右</td>
<td>n</td>
<td>1</td>
</tr>
</tbody></table>
<ul>
<li>定点数的除法运算</li>
</ul>
<blockquote>
<p>除法运算可以转换为累加-逻辑左移，根据机器数的不同，可分为原码除法和补码除法</p>
</blockquote>
<ul>
<li>原码除法运算（不恢复余数法）【原码加减交替除法】</li>
</ul>
<blockquote>
<p>商符和商值是分开的，商符由两个操作数的符号位“异或”形成</p>
</blockquote>
<ul>
<li>补码除法运算【加减交替法】</li>
</ul>
<blockquote>
<p>补码一位除法的特点是符号位与数值位一起运算，商符自然形成</p>
</blockquote>
<ul>
<li>表3 除法运算总结</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>除法类型</th>
<th>符号位参与运算</th>
<th>加减次数</th>
<th>移位方向</th>
<th>移位次数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>原码加减交替法</td>
<td>否</td>
<td>N+1或N+2</td>
<td>左</td>
<td>N</td>
<td>若最终余数为负，需恢复余数</td>
</tr>
<tr>
<td>2</td>
<td>补码加减交替法</td>
<td>是</td>
<td>N+1</td>
<td>左</td>
<td>N</td>
<td>商末位横置1</td>
</tr>
</tbody></table>
<h3 id="2-7-数据的存储和排列"><a href="#2-7-数据的存储和排列" class="headerlink" title="2.7 数据的存储和排列"></a>2.7 数据的存储和排列</h3><ul>
<li>数据的大端方式和小端方式存储</li>
</ul>
<blockquote>
<p>通常以最低有效字节(LSB)和最高有效字节（MSB）来分别表示数的低位和高位，存储数据时，从低位到高位可以从左到右排列，也可以从右到左排列</p>
</blockquote>
<ul>
<li>数据按照边界对齐方式存储</li>
</ul>
<blockquote>
<p>空间换时间的思想，RISC和ARM采用边界对齐方式，而CISC和X86对齐和不对齐都支持</p>
</blockquote>
<h2 id="3-浮点数的表示和运算"><a href="#3-浮点数的表示和运算" class="headerlink" title="3. 浮点数的表示和运算"></a>3. 浮点数的表示和运算</h2><h3 id="3-1-浮点数的表示"><a href="#3-1-浮点数的表示" class="headerlink" title="3.1 浮点数的表示"></a>3.1 浮点数的表示</h3><ul>
<li>浮点数的表现格式</li>
</ul>
<blockquote>
<p>N &#x3D; r^E * M ，其中r一般等于2</p>
</blockquote>
<ul>
<li>规格化浮点数</li>
</ul>
<blockquote>
<p>所谓规格化，是指通过调整一个非规格化浮点数的尾数和阶码的大小，使非0的浮点数在尾数的最高数位保证是一个有效值</p>
</blockquote>
<ul>
<li>左规</li>
<li>右规</li>
</ul>
<h3 id="3-2-浮点数的表示范围"><a href="#3-2-浮点数的表示范围" class="headerlink" title="3.2 浮点数的表示范围"></a>3.2 浮点数的表示范围</h3><p>负上溢|负数区|负下溢|正下溢|正数区|正上溢</p>
<blockquote>
<p>上溢时，计算机必须中断运算操作，进行溢出处理，下溢时，浮点数值趋向于0，计算机仅将其当作机器0处理</p>
</blockquote>
<h3 id="3-3-IEEE-754标准"><a href="#3-3-IEEE-754标准" class="headerlink" title="3.3 IEEE 754标准"></a>3.3 IEEE 754标准</h3><ul>
<li>表4 IEEE 754 浮点数的格式</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型</th>
<th>数符</th>
<th>阶码</th>
<th>尾数数值</th>
<th>总位数</th>
<th>偏置值十六进制</th>
<th>编置值十进制</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>短浮点数</td>
<td>1</td>
<td>8</td>
<td>23</td>
<td>32</td>
<td>7FH</td>
<td>127</td>
</tr>
<tr>
<td>2</td>
<td>长浮点数</td>
<td>1</td>
<td>11</td>
<td>52</td>
<td>64</td>
<td>3FFH</td>
<td>1023</td>
</tr>
<tr>
<td>3</td>
<td>临时浮点数</td>
<td>1</td>
<td>15</td>
<td>64</td>
<td>80</td>
<td>3FFFH</td>
<td>16383</td>
</tr>
</tbody></table>
<blockquote>
<p>短浮点数与长浮点数都采用隐含尾数最高数位的方法，因此可多表示一位尾数，临时浮点数又称扩展精度浮点数，无隐含位</p>
</blockquote>
<h3 id="3-4-定点、浮点表示的区别"><a href="#3-4-定点、浮点表示的区别" class="headerlink" title="3.4 定点、浮点表示的区别"></a>3.4 定点、浮点表示的区别</h3><ul>
<li>数值的表示范围</li>
</ul>
<blockquote>
<p>字节相同时，浮点表示法所能表示的数值范围远远大于定值表示法</p>
</blockquote>
<ul>
<li>精度</li>
</ul>
<blockquote>
<p>指一个数所含有效数值位的位数，字节相同时，浮点数精度降低</p>
</blockquote>
<ul>
<li>数的运算</li>
</ul>
<blockquote>
<p>浮点数在运算时要做尾数和阶码的运算，运算结果要求规格化</p>
</blockquote>
<ul>
<li>溢出问题</li>
</ul>
<blockquote>
<p>定点运算，运算结果超出数的表示范围，发生溢出，浮点运算中，规格化后阶码超出所能表示的范围，发生溢出</p>
</blockquote>
<h3 id="3-5-浮点数的加减运算"><a href="#3-5-浮点数的加减运算" class="headerlink" title="3.5 浮点数的加减运算"></a>3.5 浮点数的加减运算</h3><blockquote>
<p>浮点数的加减运算一律采用补码</p>
</blockquote>
<ul>
<li>对阶</li>
</ul>
<blockquote>
<p>使两个操作数的小数点位置对齐，使得两个数的阶码相等，小阶向大阶看齐</p>
</blockquote>
<ul>
<li>尾数求和</li>
</ul>
<blockquote>
<p>将对阶后的尾数按定点数加减法运算规则运算</p>
</blockquote>
<ul>
<li>规格化</li>
</ul>
<blockquote>
<p>左规，右规，左规一次相当于*2，右规一次相当于&#x2F;2</p>
</blockquote>
<ul>
<li><p>舍入</p>
<ul>
<li>0舍1入法</li>
<li>横置1法</li>
</ul>
</li>
<li><p>溢出判断</p>
</li>
</ul>
<blockquote>
<p>浮点数的溢出是由阶码的符号决定的</p>
</blockquote>
<ul>
<li>C语言的浮点数类型和类型转换</li>
</ul>
<blockquote>
<p>char-int-long-double</p>
</blockquote>
<h2 id="4-算术逻辑单元【Arithmetic-Logic-Unit-，ALU】"><a href="#4-算术逻辑单元【Arithmetic-Logic-Unit-，ALU】" class="headerlink" title="4. 算术逻辑单元【Arithmetic Logic Unit ，ALU】"></a>4. 算术逻辑单元【Arithmetic Logic Unit ，ALU】</h2><blockquote>
<p>运算器由算术逻辑单元、累加器、状态寄存器、通用寄存器等组成，ALU的功能包括+-*&#x2F;&amp;&amp;||!|以及移位、求补</p>
</blockquote>
<h3 id="4-1-串行加法器和并行加法器"><a href="#4-1-串行加法器和并行加法器" class="headerlink" title="4.1 串行加法器和并行加法器"></a>4.1 串行加法器和并行加法器</h3><blockquote>
<p>ALU核心是加法器，加法器是由全加器配以其他必要的逻辑电路组成</p>
</blockquote>
<ul>
<li>一位全加器</li>
</ul>
<blockquote>
<p>有加数Ai、加数Bi与低位传进来的进位Ci-1共三个输入，有本位Si与向高位进位Ci共两个输出</p>
</blockquote>
<ul>
<li>串行加法器</li>
</ul>
<blockquote>
<p>只有一个全加器【FA】，数据逐位串行送入加法器中进行运算，器件少、成本低，运算速度慢；</p>
</blockquote>
<ul>
<li>并行加法器</li>
</ul>
<blockquote>
<p>多个全加器组成，其位数与机器的字长相同，各位数据同时运算，有串行进位和并行进位两种进位</p>
</blockquote>
<ul>
<li>串行进位</li>
</ul>
<blockquote>
<p>把n个全加器串接起来，就可以进行两个n位数相加</p>
</blockquote>
<ul>
<li>并行进位【先行进位、同时进位】</li>
</ul>
<blockquote>
<p>各级进位信号同时形成</p>
</blockquote>
<ul>
<li>单机先行进位方式【组内并行、组间串行进位方式】</li>
<li>多级先行进位方式【组内并行、组间并行进位方式】</li>
</ul>
<h3 id="4-2-算术逻辑单元的功能和结构"><a href="#4-2-算术逻辑单元的功能和结构" class="headerlink" title="4.2 算术逻辑单元的功能和结构"></a>4.2 算术逻辑单元的功能和结构</h3><ul>
<li>带标志加法器</li>
</ul>
<blockquote>
<p>无符号数加法器只能用于两个无符号数相加，不能进行带符号整数的加、减法运算，为了加快加法运算的速度，实际电路一定使用多级先行进位方式 </p>
</blockquote>
<ul>
<li>算术逻辑单元</li>
<li>补码加减法运算部件</li>
</ul>
<h2 id="5-存储系统"><a href="#5-存储系统" class="headerlink" title="5. 存储系统"></a>5. 存储系统</h2><h3 id="5-1-存储器的分类"><a href="#5-1-存储器的分类" class="headerlink" title="5.1 存储器的分类"></a>5.1 存储器的分类</h3><ul>
<li><p>按照计算机的作用分</p>
<ul>
<li>主存储器</li>
<li>辅助存储器</li>
<li>高速缓冲存储器</li>
</ul>
</li>
<li><p>按照存储介质分</p>
<ul>
<li>磁表面存储器(磁盘、磁带)</li>
<li>磁心存储器</li>
<li>半导体存储器(MOS型存储器、双极型存储器)</li>
<li>光存储器（光盘）</li>
</ul>
</li>
<li><p>按照存储方式分类</p>
<ul>
<li>随机存储器（RAM）</li>
<li>只读存储器（ROM）</li>
<li>串行访问存储器</li>
</ul>
</li>
<li><p>按照信息可保存性分类</p>
<ul>
<li>易失性存储器</li>
<li>非易失性存储器</li>
<li>破坏性读出</li>
<li>非破坏性读出</li>
</ul>
</li>
</ul>
<h3 id="5-2-存储器的性能指标"><a href="#5-2-存储器的性能指标" class="headerlink" title="5.2 存储器的性能指标"></a>5.2 存储器的性能指标</h3><ul>
<li>存储容量</li>
</ul>
<blockquote>
<p>存储容量 &#x3D; 存储字数 * 字长</p>
</blockquote>
<ul>
<li>单位成本</li>
</ul>
<blockquote>
<p>每位价格 &#x3D; 总成本&#x2F;总容量</p>
</blockquote>
<ul>
<li><p>存储速度</p>
<blockquote>
<p>数据传输率 &#x3D; 数据的宽度&#x2F;存储周期</p>
</blockquote>
<ul>
<li>存取时间</li>
<li>存储周期</li>
<li>主存带宽</li>
</ul>
</li>
</ul>
<h3 id="5-3-多级存储系统"><a href="#5-3-多级存储系统" class="headerlink" title="5.3 多级存储系统"></a>5.3 多级存储系统</h3><table>
<thead>
<tr>
<th>CPU寄存器</th>
</tr>
</thead>
<tbody><tr>
<td>Cache</td>
</tr>
<tr>
<td>主存</td>
</tr>
<tr>
<td>磁盘</td>
</tr>
<tr>
<td>磁带 光盘</td>
</tr>
</tbody></table>
<h3 id="5-4-半导体随机存储器"><a href="#5-4-半导体随机存储器" class="headerlink" title="5.4 半导体随机存储器"></a>5.4 半导体随机存储器</h3><h4 id="5-4-1-静态随机存储器【SRAM】"><a href="#5-4-1-静态随机存储器【SRAM】" class="headerlink" title="5.4.1 静态随机存储器【SRAM】"></a>5.4.1 静态随机存储器【SRAM】</h4><blockquote>
<p>SRAM的存储元是用双稳态触发器（六晶体管MOS）来记忆，非破坏性读出，存储速度快，集成度低，功耗大，一般用来组成高速缓冲存储器</p>
</blockquote>
<h4 id="5-4-2-动态随机存储器【DRAM】"><a href="#5-4-2-动态随机存储器【DRAM】" class="headerlink" title="5.4.2 动态随机存储器【DRAM】"></a>5.4.2 动态随机存储器【DRAM】</h4><blockquote>
<p>DRAM是利用存储元电路中栅极电容上的电荷来存储信息，只使用一个晶体管</p>
</blockquote>
<ul>
<li>刷新方式<ul>
<li>集中刷新</li>
<li>分散刷新</li>
<li>异步刷新</li>
</ul>
</li>
</ul>
<h4 id="5-4-3-存储器芯片的内部结构"><a href="#5-4-3-存储器芯片的内部结构" class="headerlink" title="5.4.3 存储器芯片的内部结构"></a>5.4.3 存储器芯片的内部结构</h4><blockquote>
<p>存储体，I&#x2F;O读写电路、地址译码和控制电路、片选控制信号、读写控制信号等部分组成</p>
</blockquote>
<ul>
<li>表5 SRAM与DRAM各自特点</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>特点</th>
<th>SRAM</th>
<th>DRAM</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>存储信息</td>
<td>触发器</td>
<td>电容</td>
</tr>
<tr>
<td>2</td>
<td>破坏性读出</td>
<td>非</td>
<td>是</td>
</tr>
<tr>
<td>3</td>
<td>需要刷新</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>4</td>
<td>送行列地址</td>
<td>同时送</td>
<td>分两次送</td>
</tr>
<tr>
<td>5</td>
<td>运行速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>6</td>
<td>集成度</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>7</td>
<td>发热量（功耗）</td>
<td>大</td>
<td>小</td>
</tr>
<tr>
<td>8</td>
<td>存储成本</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>9</td>
<td>主要用途</td>
<td>高速缓存</td>
<td>主机内存</td>
</tr>
</tbody></table>
<h3 id="5-5-只读存储器"><a href="#5-5-只读存储器" class="headerlink" title="5.5 只读存储器"></a>5.5 只读存储器</h3><h4 id="5-5-1-分类"><a href="#5-5-1-分类" class="headerlink" title="5.5.1 分类"></a>5.5.1 分类</h4><ul>
<li>掩模式只读存储器</li>
</ul>
<blockquote>
<p>生产过程直接写入</p>
</blockquote>
<ul>
<li>一次可编程只读存储器</li>
</ul>
<blockquote>
<p>一旦写入，无法改变</p>
</blockquote>
<ul>
<li>可擦除可编程只读存储器</li>
<li>闪速存储器</li>
<li>固态硬盘</li>
</ul>
<h3 id="5-6-主存储器"><a href="#5-6-主存储器" class="headerlink" title="5.6 主存储器"></a>5.6 主存储器</h3><h4 id="5-6-1-基本组成"><a href="#5-6-1-基本组成" class="headerlink" title="5.6.1 基本组成"></a>5.6.1 基本组成</h4><blockquote>
<p>主存储器由一个个存储0或1的记忆单元(也称存储元件)构成的存储矩阵（也称存储体）是存储器的核心部分</p>
</blockquote>
<h4 id="5-6-2-主存储器与CPU链接"><a href="#5-6-2-主存储器与CPU链接" class="headerlink" title="5.6.2 主存储器与CPU链接"></a>5.6.2 主存储器与CPU链接</h4><ul>
<li>主存储器通过数据总线、地址总线和控制总线与CPU连接</li>
<li>数据总线的位数与工作频率的乘积正比于数据传输率</li>
<li>地址总线的位数决定了可寻址的最大内存空间</li>
<li>控制总线（读&#x2F;写）指出总线周期的类型和本次输入&#x2F;输出操作完成的时刻</li>
</ul>
<h4 id="5-6-3-主存容量的扩展"><a href="#5-6-3-主存容量的扩展" class="headerlink" title="5.6.3 主存容量的扩展"></a>5.6.3 主存容量的扩展</h4><ul>
<li>位扩展法</li>
<li>字扩展法</li>
<li>字位同时扩展法</li>
</ul>
<h4 id="5-6-4-存储芯片的地址分配和片选"><a href="#5-6-4-存储芯片的地址分配和片选" class="headerlink" title="5.6.4 存储芯片的地址分配和片选"></a>5.6.4 存储芯片的地址分配和片选</h4><ul>
<li>线选法</li>
<li>译码片选法</li>
</ul>
<h4 id="5-6-5-存储器与CPU的连接"><a href="#5-6-5-存储器与CPU的连接" class="headerlink" title="5.6.5 存储器与CPU的连接"></a>5.6.5 存储器与CPU的连接</h4><ul>
<li>合理选择存储芯片</li>
<li>地址线的连接</li>
<li>数据线的连接</li>
<li>读&#x2F;写命令线的连接</li>
<li>片选线的连接</li>
</ul>
<h3 id="5-7-双端口RAM和多模块存储器"><a href="#5-7-双端口RAM和多模块存储器" class="headerlink" title="5.7 双端口RAM和多模块存储器"></a>5.7 双端口RAM和多模块存储器</h3><h4 id="5-7-1-双端口RAM"><a href="#5-7-1-双端口RAM" class="headerlink" title="5.7.1 双端口RAM"></a>5.7.1 双端口RAM</h4><blockquote>
<p>空间并行技术</p>
</blockquote>
<h4 id="5-7-2-多模块存储器"><a href="#5-7-2-多模块存储器" class="headerlink" title="5.7.2 多模块存储器"></a>5.7.2 多模块存储器</h4><blockquote>
<p>时间并行</p>
</blockquote>
<ul>
<li>单体多字存储器</li>
<li>多体并行存储器</li>
</ul>
<h3 id="5-8-高速缓冲存储器"><a href="#5-8-高速缓冲存储器" class="headerlink" title="5.8 高速缓冲存储器"></a>5.8 高速缓冲存储器</h3><blockquote>
<p>通常将存储系统分为“Cache - 主存”层次和“主存-辅存”层次，高速缓冲技术就是利用程序访问的局部性原理</p>
</blockquote>
<ul>
<li>Cache 的基本工作原理</li>
</ul>
<blockquote>
<p>Cache位于存储器层次结构的顶层，通常由SRAM构成，当CPU发出请求时，若Cache命中，将此地址转换为Cache地址，直接对Cache进行读操作，不命中，仍需要访问主存，并把此字所在的块一次性从主存调入Cache。</p>
</blockquote>
<ul>
<li><p>Cache与主存的映射方式</p>
<ul>
<li>直接映射</li>
<li>全相联映射</li>
<li>组相联映射</li>
</ul>
</li>
<li><p>Cache中主存块的替换算法</p>
<ul>
<li>随机算法</li>
<li>先进先出算法</li>
<li>近期最少使用算法</li>
</ul>
</li>
<li><p>Cache写策略</p>
<ul>
<li>全写法【FIFO】</li>
<li>写回法<ul>
<li>写分配法</li>
<li>非写分配法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-9-虚拟存储器"><a href="#5-9-虚拟存储器" class="headerlink" title="5.9 虚拟存储器"></a>5.9 虚拟存储器</h3><blockquote>
<p>虚拟存储器将主存或辅存的地址空间统一编址，形成一个庞大的地址空间，在这个空间，用户可以自由编程，而不必在乎实际的主存容量和程序在主存中实际的存放位置</p>
</blockquote>
<ul>
<li>页式虚拟存储器</li>
</ul>
<blockquote>
<p>以页为基本单位的虚拟存储器，主存的页为实页，虚存的页为虚页</p>
</blockquote>
<ul>
<li><p>页表</p>
</li>
<li><p>快表（TLB）</p>
</li>
<li><p>具有TLB和Cache的多级存储系统</p>
</li>
<li><p>表6 TLB、Page、Cache三种缺失的可能情况</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>TLB</th>
<th>Page</th>
<th>Cache</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>命中</td>
<td>命中</td>
<td>命中</td>
<td>TLB命中则Page一定命中，信息在主存，就可能在Cache中</td>
</tr>
<tr>
<td>2</td>
<td>命中</td>
<td>命中</td>
<td>缺失</td>
<td>TLB命中则Page一定命中，信息在主存，也可能不在Cache中</td>
</tr>
<tr>
<td>3</td>
<td>缺失</td>
<td>命中</td>
<td>命中</td>
<td>TLB缺失但Page可能命中，信息在主存，就可能在Cache中</td>
</tr>
<tr>
<td>4</td>
<td>缺失</td>
<td>命中</td>
<td>缺失</td>
<td>TLB缺失但Page可能命中，信息在主存，也可能不在Cache中</td>
</tr>
<tr>
<td>5</td>
<td>缺失</td>
<td>缺失</td>
<td>缺失</td>
<td>TLB缺失则Page也可能命中，信息不在主存，就一定不在Cache中</td>
</tr>
</tbody></table>
<ul>
<li>段式虚拟存储器</li>
<li>段页式虚拟存储器</li>
</ul>
<blockquote>
<p>虚地址分为段号，段内页号，页内地址三部分</p>
</blockquote>
<ul>
<li><p>虚拟存储器与Cache的比较</p>
</li>
<li><p>相同</p>
<ul>
<li>最终目的都是为了提高系统的性能，两者都有容量、速度、价格的梯度</li>
<li>都把数据划分为小信息块，并作为基本的传递单位，虚存系统的信息块更大</li>
<li>都有地址的映射、替换算法、更新策略等问题</li>
<li>依据程序的局部性原理应用“快速缓存的思想”，将活跃的数据放在相对高速的部件中</li>
</ul>
</li>
<li><p>不同</p>
<ul>
<li>Cache主要解决系统速度，而虚拟存储器却是为了解决主存容量</li>
<li>Cache全由硬件实现，是硬件存储器，对所有程序员透明，而虚拟存储器由OS和硬件共同实现，是逻辑上的存储器，对系统程序员不透明，但对应用程序员透明。</li>
<li>对于不命中性能影响，因为CPU的速度约为Cache的10倍，主存的速度为硬盘的100倍以上，因此虚拟存储器系统不命中时对系统性能影响更大</li>
<li>CPU与Cache和主存都建立了直接访问的通路，而辅存与CPU没有直接通路，也就是说在Cache不命中时主存能和CPU直接通信，同时将数据调入Cache，而虚拟存储器系统不命中时，只能先由硬盘调入主存，而不能直接和CPU通信</li>
</ul>
</li>
</ul>
<h2 id="6-指令系统"><a href="#6-指令系统" class="headerlink" title="6. 指令系统"></a>6. 指令系统</h2><blockquote>
<p>指令就是机器语言的一组有意义的二进制代码，能够使计算机执行某种操作；</p>
</blockquote>
<h3 id="6-1-指令的属性"><a href="#6-1-指令的属性" class="headerlink" title="6.1 指令的属性"></a>6.1 指令的属性</h3><ul>
<li>指令</li>
</ul>
<table>
<thead>
<tr>
<th>操作指令格式</th>
<th>操作码字段</th>
<th>地址码字段</th>
<th>地址码地址</th>
<th>地址码地址</th>
<th>地址码地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>零地址指令</td>
<td>OP</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>不需要操作数的指令，仅用在堆栈计算机中</td>
</tr>
<tr>
<td>一地址指令</td>
<td>OP</td>
<td>A1</td>
<td></td>
<td></td>
<td></td>
<td>OP(A1)-&gt;A1加1、减1、求反、求补</td>
</tr>
<tr>
<td>二地址指令</td>
<td>OP</td>
<td>A1</td>
<td>A2</td>
<td></td>
<td></td>
<td>（A1）OP（A2）-&gt;A1算术和逻辑运算指令</td>
</tr>
<tr>
<td>三地址指令</td>
<td>OP</td>
<td>A1</td>
<td>A2</td>
<td>A3(结果)</td>
<td></td>
<td>(A1)OP(A2)-&gt;A3</td>
</tr>
<tr>
<td>四地址指令</td>
<td>OP</td>
<td>A1</td>
<td>A2</td>
<td>A3(结果）</td>
<td>A4(下址）</td>
<td>(A1)OP(A2)-&gt;A3,A4&#x3D;下一条将要执行指令的地址</td>
</tr>
</tbody></table>
<ul>
<li>扩展操作码指令格式</li>
</ul>
<blockquote>
<p>&lt;1&gt; 不允许短码是长码的前缀，即短操作码不能与长操作码的前面部分的代码相同</p>
<p>&lt;2&gt; 各指令的操作码一定不能重复</p>
</blockquote>
<ul>
<li>指令的操作系统<ul>
<li>数据传送</li>
<li>算术和逻辑运算</li>
<li>移位操作</li>
<li>转移操作</li>
<li>输入输出操作</li>
</ul>
</li>
</ul>
<h3 id="6-2-指令的寻址方式"><a href="#6-2-指令的寻址方式" class="headerlink" title="6.2 指令的寻址方式"></a>6.2 指令的寻址方式</h3><blockquote>
<p>有效地址（EA） &#x3D; 形式地址（A） + 寻址方式</p>
</blockquote>
<ul>
<li><p>指令寻址</p>
<blockquote>
<p>寻找下一条将要执行的指令地址称为指令寻址</p>
</blockquote>
<ul>
<li>顺序寻址方式</li>
<li>跳跃寻址方式</li>
</ul>
</li>
<li><p>数据寻址</p>
<blockquote>
<p>寻找操作数的地址称为数据寻址</p>
</blockquote>
<ul>
<li>隐含寻址</li>
<li>立即（数）寻址</li>
<li>直接寻址</li>
<li>间接寻址</li>
<li>寄存器寻址</li>
<li>寄存器间接寻址</li>
<li>相对寻址</li>
<li>基址寻址</li>
<li>变址寻址</li>
<li>堆栈寻址</li>
</ul>
</li>
<li><p>表7 寻址方式、有效地址及访存次数</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>寻址方式</th>
<th>有效地址</th>
<th>访存次数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>隐含寻址</td>
<td>程序指定</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>立即（数）寻址</td>
<td>A即是操作数</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>直接寻址</td>
<td>EA &#x3D; A</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>一次间接寻址</td>
<td>EA &#x3D; （A）</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>寄存器寻址</td>
<td>EA &#x3D; Ri</td>
<td>0</td>
</tr>
<tr>
<td>6</td>
<td>寄存器间接一次寻址</td>
<td>EA &#x3D; (Ri)</td>
<td>1</td>
</tr>
<tr>
<td>7</td>
<td>相对寻址</td>
<td>EA &#x3D; (PC) + A</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>基址寻址</td>
<td>EA &#x3D; (BR) + A</td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td>变址寻址</td>
<td>EA &#x3D; (IX) + A</td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>堆栈寻址</td>
<td>入栈出栈EA确定方式不同</td>
<td>硬堆栈不访存、软堆栈访存1次</td>
</tr>
</tbody></table>
<h3 id="6-3-X86汇编指令"><a href="#6-3-X86汇编指令" class="headerlink" title="6.3 X86汇编指令"></a>6.3 X86汇编指令</h3><blockquote>
<p>X86处理器中有8个32位的通用寄存器</p>
</blockquote>
<ul>
<li>寻址模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov eax, [ebx];</span><br><span class="line">mov [var], ebx;</span><br><span class="line">mov eax,[esi-4];</span><br><span class="line">mov [esi+eax], cl;</span><br><span class="line">mov edx, [esi+4*ebx];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最多只能利用两个32位寄存器和一个32位的有符号常数相加计算出一个内存地址</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov eax, [ebx-ecx];错误，只能够用加法</span><br><span class="line">mov [eax+esi+edi], ebx;错误，最多只能有两个寄存器参与运算</span><br></pre></td></tr></table></figure>

<ul>
<li>数据长度规定</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov [ebx], 2;//不能够识别</span><br></pre></td></tr></table></figure>

<p>可以写成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov byte ptr [ebx], 2;单字节</span><br><span class="line">mov word ptr [ebx], 2;双字节</span><br><span class="line">mov dword ptr [ebx], 2;四字节</span><br></pre></td></tr></table></figure>

<ul>
<li>常用指令</li>
</ul>
<blockquote>
<p><reg> 表示任意寄存器，其后带有数字，则指定其位数；<mem>表示内存地址；<con>表示常数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov ax &lt;con16&gt;;机器码为B8H</span><br><span class="line">mov a1, &lt;con8&gt;;机器码为B0H</span><br><span class="line">mov &lt;reg16&gt;/&lt;mem16&gt;, &lt;reg16&gt;;机器码为89H</span><br><span class="line">mov &lt;reg8&gt;, &lt;reg8&gt;/&lt;mem8&gt;;机器码为8AH</span><br><span class="line">mov &lt;reg16&gt;, &lt;reg16&gt;/&lt;mem16&gt;;机器码为8BH</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数据传送指令</p>
</li>
<li><p>mov指令</p>
</li>
</ul>
<blockquote>
<p>将第二个操作数复制到第一个操作数（寄存器或内存），但不能从内存<mem>复制到<mem>中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">mov &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">mov &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line">mov &lt;reg&gt;, &lt;con&gt;</span><br><span class="line">mov &lt;mem&gt;, &lt;con&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov eax, ebx;</span><br><span class="line">mov byte ptr [var], 5;</span><br></pre></td></tr></table></figure>

<ul>
<li>push指令</li>
</ul>
<blockquote>
<p>push指令将操作数压入内存的栈，常用于函数调用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">push &lt;reg32&gt;</span><br><span class="line">push &lt;mem&gt;</span><br><span class="line">push &lt;con32&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">push eax;</span><br><span class="line">push [var];</span><br></pre></td></tr></table></figure>

<ul>
<li>pop指令</li>
</ul>
<blockquote>
<p>pop出栈</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pop edi</span><br><span class="line">pop [ebx]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>算术与逻辑运算指令</p>
</li>
<li><p>add&#x2F;sub指令</p>
</li>
</ul>
<blockquote>
<p>将两个操作数相加或者相减，结果保存到第一个操作数中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add &lt;reg&gt;, &lt;reg&gt; / sub &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">add &lt;reg&gt;, &lt;mem&gt; / sub &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">add &lt;mem&gt;, &lt;reg&gt; / sub &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line">add &lt;reg&gt;, &lt;con&gt; / sub &lt;reg&gt;, &lt;con&gt;</span><br><span class="line">add &lt;mem&gt;, &lt;con&gt; / sub &lt;mem&gt;, &lt;con&gt; </span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sub eax, 10;eax&lt;- eax - 10</span><br><span class="line">add byte ptr [var], 10; var&lt;- var+10</span><br></pre></td></tr></table></figure>

<ul>
<li>inc&#x2F;dec指令</li>
</ul>
<blockquote>
<p>inc、dec指令分别表示将操作数自加1、自减1</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inc &lt;reg&gt; / dec &lt;reg&gt;</span><br><span class="line">inc &lt;mem&gt; / dec &lt;mem&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dec eax;eax自减1</span><br><span class="line">inc dword ptr [var];自加1</span><br></pre></td></tr></table></figure>

<ul>
<li>imul指令</li>
</ul>
<blockquote>
<p>带符号整数乘法指令，第一个操作数必须为寄存器，将第一个和第二个或者第二个和第三个操作数相乘，结果保存在第一个操作数中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">imul &lt;reg32&gt;, &lt;reg32&gt;</span><br><span class="line">imul &lt;reg32&gt;, &lt;mem&gt;</span><br><span class="line">imul &lt;reg32&gt;, &lt;reg32&gt;, &lt;con&gt;</span><br><span class="line">imul &lt;reg32&gt;, &lt;mem&gt;, &lt;con&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">imul eax, [var];eax&lt;-eax*[var]</span><br><span class="line">imul esi, edi, 25;esi&lt;-edi*25</span><br></pre></td></tr></table></figure>

<ul>
<li>idiv指令</li>
</ul>
<blockquote>
<p>idiv是带符号整数除法指令，它只有一个操作数，即除数，而被除数则为edx：eax中的内容，商送到eax，余数送到edx</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">idiv &lt;reg32&gt;</span><br><span class="line">idiv &lt;mem&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">idiv ebx;</span><br><span class="line">idiv dword ptr [var];</span><br></pre></td></tr></table></figure>

<ul>
<li>and&#x2F;or&#x2F;xor指令</li>
</ul>
<blockquote>
<p>逻辑与、或、异或，操作数的位操作</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">and &lt;reg&gt;, &lt;reg&gt; / or &lt;reg&gt;, &lt;reg&gt; / xor &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;, &lt;mem&gt; / or &lt;reg&gt;, &lt;mem&gt; / xor &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">and &lt;mem&gt;, &lt;reg&gt; / or &lt;mem&gt;, &lt;reg&gt; / xor &lt;mem&gt;, &lt;reg&gt; </span><br><span class="line">and &lt;reg&gt;, &lt;con&gt; / or &lt;reg&gt;, &lt;con&gt; / xor &lt;reg&gt;, &lt;con&gt; </span><br><span class="line">and &lt;mem&gt;, &lt;con&gt; / or &lt;mem&gt;, &lt;con&gt; / xor &lt;mem&gt;, &lt;con&gt;  </span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">and eax, 0fH ;将eax的强28位全部置为0，最后四位保持不变</span><br><span class="line">xor edx, edx ;置edx的内容为0</span><br></pre></td></tr></table></figure>

<ul>
<li>not指令</li>
</ul>
<blockquote>
<p>not指令是位翻转指令，将操作中的每一个数进行翻转,0-&gt;1,1-&gt;0</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">not &lt;reg&gt;</span><br><span class="line">not &lt;mem&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">not byte ptr [var];</span><br></pre></td></tr></table></figure>

<ul>
<li>neg指令</li>
</ul>
<blockquote>
<p>neg是取负指令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">neg &lt;reg&gt;</span><br><span class="line">neg &lt;mem&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">neg eax;eax &lt;- -eax</span><br></pre></td></tr></table></figure>

<ul>
<li>shl&#x2F;shr指令</li>
</ul>
<blockquote>
<p>逻辑移位指令，shl逻辑左移，shr逻辑右移；第一个操作数表示被操作数，第二个表示指示移位的位数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shl &lt;reg&gt;, &lt;con8&gt; / shr &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">shl &lt;mem&gt;, &lt;con8&gt; / shr &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">shl &lt;reg&gt;, &lt;cl&gt; / shr &lt;reg&gt;, &lt;cl&gt;</span><br><span class="line">shl &lt;mem&gt;, &lt;cl&gt; / shr &lt;mem&gt;, &lt;cl&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shl eax, 1;eax的值左移一位 *2</span><br><span class="line">shr ebx，cl；</span><br></pre></td></tr></table></figure>

<ul>
<li>控制流指令</li>
</ul>
<blockquote>
<p>X86处理器维持着一个指示当前执行指令的指令指针（IP），此指针自动指向下一条指令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov esi, [ebp + 8]</span><br><span class="line">begin : xor ecx, ecx</span><br><span class="line">		mov eax, [esi]</span><br></pre></td></tr></table></figure>

<ul>
<li>jmp指令</li>
</ul>
<blockquote>
<p>jmp指令控制IP转移到lable所指示的地址</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jmp &lt;lable&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jmp begin</span><br></pre></td></tr></table></figure>

<ul>
<li>jcondition指令</li>
</ul>
<blockquote>
<p>条件转移指令，它依据处理机状态字中的一系列状态转移</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">je &lt;lable&gt; (jump when equal)</span><br><span class="line">jne &lt;lable&gt; (jump when not equal)</span><br><span class="line">jz &lt;lable&gt; (jump when last result was zero)</span><br><span class="line">jg &lt;lable&gt; (jump when greater than)</span><br><span class="line">jge &lt;lable&gt; (jump when greater than or equal to)</span><br><span class="line">jl &lt;lable&gt; (jump when less than)</span><br><span class="line">jle &lt;lable&gt; (jump when less than or equal to)</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmp eax, ebx</span><br><span class="line">jle <span class="keyword">done</span>;如果eax的值小于等于ebx的值，跳转到<span class="keyword">done</span>指示的指令执行，否则执行下一条指令</span><br></pre></td></tr></table></figure>

<ul>
<li>cmp指令</li>
</ul>
<blockquote>
<p>cmp用来比较两个操作数的值，并根据比较结果设置处理机状态字中的条件码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmp &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">cmp &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">cmp &lt;reg&gt;, &lt;con&gt;</span><br><span class="line">cmp &lt;mem&gt;, &lt;reg&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>栗子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmp dword ptr [var], 10</span><br><span class="line">jne loop;</span><br></pre></td></tr></table></figure>

<ul>
<li>call&#x2F;ret指令</li>
</ul>
<blockquote>
<p>分别实现子程序（过程、函数）的调用和返回</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call &lt;lable&gt;</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<h3 id="6-4-复杂指令系统计算机（-CISC）和精简指令系统计算机（RISC）"><a href="#6-4-复杂指令系统计算机（-CISC）和精简指令系统计算机（RISC）" class="headerlink" title="6.4 复杂指令系统计算机（ CISC）和精简指令系统计算机（RISC）"></a>6.4 复杂指令系统计算机（ CISC）和精简指令系统计算机（RISC）</h3><ul>
<li>表8 CISC和RISC的对比</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>对比项目</th>
<th>CISC</th>
<th>RISC</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>指令系统</td>
<td>复杂，庞大</td>
<td>简单、精简</td>
</tr>
<tr>
<td>2</td>
<td>指令数目</td>
<td>一般大于200条</td>
<td>一般小于100条</td>
</tr>
<tr>
<td>3</td>
<td>指令字长</td>
<td>不固定</td>
<td>定长</td>
</tr>
<tr>
<td>4</td>
<td>可访存指令</td>
<td>不加限制</td>
<td>只有Load&#x2F;Store指令</td>
</tr>
<tr>
<td>5</td>
<td>各种指令执行时间</td>
<td>相差较大</td>
<td>绝大多数在一个周期内完成</td>
</tr>
<tr>
<td>6</td>
<td>各种指令使用频度</td>
<td>相差很大</td>
<td>都比较常用</td>
</tr>
<tr>
<td>7</td>
<td>通用寄存器数量</td>
<td>较少</td>
<td>多</td>
</tr>
<tr>
<td>8</td>
<td>目标代码</td>
<td>难以用优化编译生成高效的目标代码程序</td>
<td>采用优化的编译程序，生成代码较为高效</td>
</tr>
<tr>
<td>9</td>
<td>控制方式</td>
<td>绝大多数为微程序控制</td>
<td>绝大多数为组合逻辑控制</td>
</tr>
<tr>
<td>10</td>
<td>指令流水线</td>
<td>可以通过一定方式实现</td>
<td>必须实现</td>
</tr>
</tbody></table>
<h2 id="7-中央处理器"><a href="#7-中央处理器" class="headerlink" title="7. 中央处理器"></a>7. 中央处理器</h2><h3 id="7-1-功能和基础结构"><a href="#7-1-功能和基础结构" class="headerlink" title="7.1 功能和基础结构"></a>7.1 功能和基础结构</h3><ul>
<li><p>CPU的功能</p>
<ul>
<li>指令控制</li>
<li>操作控制</li>
<li>时间控制</li>
<li>数据加工</li>
<li>中断处理</li>
</ul>
</li>
<li><p>CPU的基本机构</p>
<ul>
<li><p>运算器</p>
<ul>
<li>算术逻辑单元（ALU）</li>
<li>暂存寄存器</li>
<li>累加寄存器</li>
<li>通用寄存器组</li>
<li>程序状态字寄存器</li>
<li>移位器</li>
<li>计数器</li>
</ul>
</li>
<li><p>控制器</p>
<blockquote>
<p>控制器有硬布线控制器和微程序控制器</p>
</blockquote>
<ul>
<li>程序计数器</li>
<li>指令寄存器</li>
<li>指令译码器</li>
<li>存储器地址寄存器</li>
<li>存储器数据寄存器</li>
<li>时序系统</li>
<li>微操作信号发生器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="7-2-指令执行过程"><a href="#7-2-指令执行过程" class="headerlink" title="7.2 指令执行过程"></a>7.2 指令执行过程</h3><blockquote>
<p>CPU从主存中取出并执行一条指令的时间称为指令周期</p>
</blockquote>
<ul>
<li><p>指令周期的数据流</p>
<ul>
<li>取指周期</li>
</ul>
<blockquote>
<p>&lt;1&gt; PC MAR 地址总线 主存</p>
<p>&lt;2&gt; CU发出控制信号 控制总线 主存</p>
<p>&lt;3&gt; 主存 数据总线 MDR IR（存放指令）</p>
<p>&lt;4&gt;CU发出读命令PC内容+1</p>
</blockquote>
<ul>
<li>间址周期</li>
</ul>
<blockquote>
<p>&lt;1&gt; Ad（IR或MDR）、MAR、地址总线、主存</p>
<p>&lt;2&gt; CU发出读命令、控制总线、主存</p>
<p>&lt;3&gt; 主存、数据总线、MDR（存放有效地址）</p>
</blockquote>
<ul>
<li>执行周期</li>
</ul>
<blockquote>
<p>执行周期的任务是根据IR中的指令字的操作码和操作数通过ALU操作产生执行结果，没有统一的数据流向</p>
</blockquote>
<ul>
<li>中断周期</li>
</ul>
<blockquote>
<p>中断周期的任务是处理中断请求</p>
<p>&lt;1&gt; CU控制将SP-1，SP、MAR、地址总线、主存</p>
<p>&lt;2&gt; CU发出写命令、控制总线、主存</p>
<p>&lt;3&gt; PC、MDR、数据总线、主存（程序断点存入主存）</p>
<p>&lt;4&gt; CU（中断服务程序的入口地址）、PC</p>
</blockquote>
</li>
</ul>
<h3 id="7-3-指令执行方案"><a href="#7-3-指令执行方案" class="headerlink" title="7.3 指令执行方案"></a>7.3 指令执行方案</h3><ul>
<li>单指令周期</li>
<li>多指令周期</li>
<li>流水线方案</li>
</ul>
<h3 id="7-4-数据通路的功能和基本结构"><a href="#7-4-数据通路的功能和基本结构" class="headerlink" title="7.4 数据通路的功能和基本结构"></a>7.4 数据通路的功能和基本结构</h3><blockquote>
<p>数据通路是数据在功能部件之间传送的路径</p>
</blockquote>
<ul>
<li><p>基本结构</p>
<ul>
<li>CPU内部单总线方式</li>
<li>CPU内部三总线方式</li>
<li>专用数据通路方式</li>
</ul>
</li>
<li><p>数据流向</p>
<ul>
<li>寄存器之间的数据传送</li>
</ul>
<blockquote>
<p>PC -&gt;BUS</p>
<p>BUS-&gt;MAR</p>
</blockquote>
<ul>
<li>主存与CPU之间的数据传送</li>
</ul>
<blockquote>
<p>PC-&gt;BUS-&gt;MAR</p>
<p>1-&gt;R</p>
<p>MEM(MAR)-&gt;MDR</p>
<p>MDR-&gt;Bus-&gt;IR</p>
</blockquote>
<ul>
<li>执行算术或逻辑运算</li>
</ul>
<blockquote>
<p>Ad(IR)-&gt;BUS-&gt;MAR</p>
<p>1-&gt;R</p>
<p>MEM-&gt;数据线-&gt;MDR</p>
<p>MDR-&gt;BUS-&gt;Y</p>
<p>(ACC)+（Y）-&gt;Z</p>
<p>Z-&gt;ACC</p>
</blockquote>
</li>
</ul>
<h3 id="7-5-控制器的功能和工作原理"><a href="#7-5-控制器的功能和工作原理" class="headerlink" title="7.5 控制器的功能和工作原理"></a>7.5 控制器的功能和工作原理</h3><h4 id="7-5-1-硬布线控制器"><a href="#7-5-1-硬布线控制器" class="headerlink" title="7.5.1 硬布线控制器"></a>7.5.1 硬布线控制器</h4><ul>
<li>CU输入信号来源</li>
</ul>
<blockquote>
<p>&lt;1&gt; 经指令译码器译码产生的指令信息</p>
<p>&lt;2&gt;时序系统产生的机器周期信号和节拍信号</p>
<p>&lt;3&gt; 来自执行单元的反馈信息即标志</p>
</blockquote>
<ul>
<li><p>时序系统及微操作</p>
<ul>
<li>时钟周期</li>
<li>机器周期</li>
<li>指令周期</li>
<li>微操作命令分析<ul>
<li>取指周期的微操作命令</li>
<li>间址周期的微操作命令</li>
<li>执行周期的微操作命令</li>
</ul>
</li>
</ul>
</li>
<li><p>CPU的控制方式</p>
<ul>
<li>同步控制方式</li>
<li>异步控制方式</li>
<li>联合控制方式</li>
</ul>
</li>
<li><p>硬布线控制单元设计步骤</p>
<ul>
<li>列出微操作命令的操作时间表</li>
<li>进行微操作信号综合</li>
<li>画出微操作命令的逻辑图</li>
</ul>
</li>
</ul>
<h4 id="7-5-2-微程序控制器"><a href="#7-5-2-微程序控制器" class="headerlink" title="7.5.2 微程序控制器"></a>7.5.2 微程序控制器</h4><ul>
<li><p>基本概念</p>
<ul>
<li>微命令与微操作</li>
<li>微指令与微周期</li>
<li>主存储器与控制存储器</li>
<li>程序与微程序</li>
</ul>
</li>
<li><p>寄存器的区别</p>
<ul>
<li>地址寄存器【MAR】</li>
</ul>
<blockquote>
<p>用于存放主存的读、写地址</p>
</blockquote>
<ul>
<li>微地址寄存器【CMAR】</li>
</ul>
<blockquote>
<p>用于存放控制存储器的读写微指令的地址</p>
</blockquote>
<ul>
<li>指令寄存器【IR】</li>
</ul>
<blockquote>
<p>用于存放从主存中读出的指令</p>
</blockquote>
<ul>
<li>微指令寄存器【CMDR】</li>
</ul>
<blockquote>
<p>用于存放从控制存储器中读出的微指令</p>
</blockquote>
</li>
<li><p>微程序控制器的组成和工作过程</p>
<ul>
<li>控制存储器</li>
<li>微指令寄存器</li>
<li>微地址形成部件</li>
<li>微地址寄存器</li>
</ul>
</li>
<li><p>微程序控制器的工作过程</p>
<ul>
<li>执行取微指令公共操作</li>
<li>由机器指令的操作码字段通过微地址形成部件产生该机器指令所对应的微程序的入口地址，并送入CMAR</li>
<li>从CM中逐条取出对应的微指令并执行</li>
<li>执行完对应于第一条机器指令的一个微程序后，又回到取指微程序的入口地址，重复第一步，以完成取下一条机器指令的操作</li>
</ul>
</li>
<li><p>微指令的编码方式</p>
<ul>
<li>直接编码（直接控制）方式</li>
<li>字段直接编码方式</li>
</ul>
</li>
<li><p>微指令的地址形成方式</p>
<ul>
<li>直接由微指令的下地址字段指出</li>
<li>根据机器指令的操作码形成</li>
</ul>
</li>
<li><p>微指令的格式</p>
<ul>
<li>水平型微指令</li>
<li>垂直型微指令</li>
<li>混合型微指令</li>
</ul>
</li>
<li><p>微程序控制单元的设计步骤</p>
<ul>
<li>写出对应机器指令的微操作命令及节拍安排</li>
<li>确定微指令格式</li>
<li>编写微指令码点</li>
</ul>
</li>
<li><p>表 9 微程序控制器和硬布线控制器的对比</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>对比项目</th>
<th>微程序控制器</th>
<th>硬布线控制器</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>工作原理</td>
<td>微操作控制信号以微程序的形式存放在控制存储器中，执行指令时读出即可</td>
<td>微操作控制信号由组合逻辑电路根据当前的指令码、状态和时序，即时产生</td>
</tr>
<tr>
<td>2</td>
<td>执行速度</td>
<td>慢</td>
<td>快</td>
</tr>
<tr>
<td>3</td>
<td>规整性</td>
<td>较规整</td>
<td>繁琐、不规整</td>
</tr>
<tr>
<td>4</td>
<td>应用场合</td>
<td>CISC CPU</td>
<td>RISC CPU</td>
</tr>
<tr>
<td>5</td>
<td>易扩充性</td>
<td>易扩充修改</td>
<td>困难</td>
</tr>
</tbody></table>
<h3 id="7-6-指令流水线"><a href="#7-6-指令流水线" class="headerlink" title="7.6 指令流水线"></a>7.6 指令流水线</h3><blockquote>
<p>采用流水线技术只需增加少量硬件就能够把计算机的运算速度提高几倍，并行处理技术</p>
</blockquote>
<ul>
<li><p>阶段</p>
<ul>
<li>取指</li>
<li>分析</li>
<li>执行</li>
</ul>
</li>
<li><p>当多条指令在处理器执行</p>
<ul>
<li>顺序执行方式</li>
<li>流水线执行方式</li>
</ul>
</li>
<li><p>流水线的分类</p>
<ul>
<li>部件功能级、处理机级和处理机间级流水线</li>
<li>单功能流水线和多功能流水线</li>
<li>动态流水线和静态流水线</li>
<li>线性流水线和非线性流水线</li>
</ul>
</li>
<li><p>影响流水线的因素</p>
<ul>
<li><p>资源冲突【结构相关】【资源重复配置+数据存储器+指令存储器】</p>
</li>
<li><p>数据冲突【数据相关】【同步】</p>
<ul>
<li>写后读（Read After Write，RAW）</li>
<li>读后写（Write After Read ，WAR）</li>
<li>写后写（Write AfterWrite，WAW）</li>
</ul>
</li>
<li><p>控制冲突【控制相关】</p>
</li>
</ul>
</li>
<li><p>流水线的性能指标</p>
<ul>
<li>流水线的吞吐率</li>
</ul>
<blockquote>
<p>TP &#x3D; n&#x2F;Tk</p>
</blockquote>
<ul>
<li>流水线的加速比</li>
</ul>
<blockquote>
<p>S &#x3D; T0&#x2F;Tk</p>
</blockquote>
<ul>
<li>流水线的效率</li>
</ul>
<blockquote>
<p>E &#x3D; T0&#x2F;(kTk)</p>
</blockquote>
</li>
<li><p>超标量流水线</p>
<ul>
<li>超标量流水线技术</li>
<li>超流水线技术</li>
</ul>
</li>
</ul>
<h2 id="8-总线"><a href="#8-总线" class="headerlink" title="8. 总线"></a>8. 总线</h2><blockquote>
<p>总线是一组能为多个部件分时共享的公共信息传送线路，分时和共享</p>
</blockquote>
<h3 id="8-1-总线属性"><a href="#8-1-总线属性" class="headerlink" title="8.1 总线属性"></a>8.1 总线属性</h3><ul>
<li><p>总线设备</p>
<ul>
<li>主设备</li>
<li>从设备</li>
</ul>
</li>
<li><p>总线特性</p>
<ul>
<li>机械特性（尺寸、形状）</li>
<li>电气特性（传输方向、有效的电平范围）</li>
<li>功能特性（每根传输线的功能）</li>
<li>时间特性（信号和时序的关系）</li>
</ul>
</li>
<li><p>总线的猝发传输方式</p>
</li>
</ul>
<blockquote>
<p>在一个总线周期内传输存储地址连续的多个数据字的总线传输方式</p>
</blockquote>
<ul>
<li><p>总线的分类</p>
<ul>
<li>片内总线</li>
<li>系统总线<ul>
<li>地址总线</li>
<li>数据总线</li>
<li>控制总线</li>
</ul>
</li>
<li>通信总线<ul>
<li>并行总线</li>
<li>串行总线</li>
</ul>
</li>
</ul>
</li>
<li><p>系统总线的结构</p>
<ul>
<li>单总线结构</li>
<li>双总线结构</li>
<li>三总线结构</li>
</ul>
</li>
<li><p>总线的性能指标</p>
<ul>
<li>总线的传输周期</li>
<li>总线时钟周期</li>
<li>总线的工作频率</li>
<li>总线的时间频率</li>
<li>总线带宽（不是总线宽度）</li>
</ul>
<blockquote>
<p>总线带宽 &#x3D; (总线宽度&#x2F;8)* 总线频率 </p>
<p>（总线工作频率）22*（16&#x2F;8）</p>
</blockquote>
<ul>
<li>总线复用</li>
<li>信号线数</li>
</ul>
</li>
</ul>
<h3 id="8-2-总线仲裁"><a href="#8-2-总线仲裁" class="headerlink" title="8.2 总线仲裁"></a>8.2 总线仲裁</h3><ul>
<li>集中仲裁方式<ul>
<li>链式查询方式</li>
<li>计数器定时查询方式</li>
<li>独立请求方式</li>
</ul>
</li>
<li>分布仲裁方式</li>
</ul>
<blockquote>
<p>分布仲裁方式不需要中央仲裁器，每个潜在的</p>
</blockquote>
<ul>
<li>表10 三种集中仲裁方式的区别和联系</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>对比项目</th>
<th>链式查询</th>
<th>计数器定时查询</th>
<th>独立请求</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>控制线数</td>
<td>3（总线请求：1；总线忙：1；总线允许：1；）</td>
<td>[log2n] + 2(总线请求：1；总线忙：1；总线允许：[log2n]；)</td>
<td>2n+1(总线请求：n；总线忙：n；总线允许：1；)</td>
</tr>
<tr>
<td>2</td>
<td>优点</td>
<td>优先级固定；结构简单；扩充容易</td>
<td>优先级灵活</td>
<td>响应速度快，优先级灵活</td>
</tr>
<tr>
<td>3</td>
<td>缺点</td>
<td>对电路故障敏感，优先级不灵活</td>
<td>控制线路多；控制复杂</td>
<td>控制线多；控制复杂</td>
</tr>
</tbody></table>
<h3 id="8-3-总线操作和定时"><a href="#8-3-总线操作和定时" class="headerlink" title="8.3 总线操作和定时"></a>8.3 总线操作和定时</h3><ul>
<li><p>总线传输的4个阶段</p>
<ul>
<li>申请分配阶段</li>
<li>寻址阶段</li>
<li>传输阶段</li>
<li>结束阶段</li>
</ul>
</li>
<li><p>同步定时方式【同步通信】</p>
</li>
</ul>
<blockquote>
<p>系统采用一个统一的时钟信号来协调发送和接收双方的传送定时关系</p>
</blockquote>
<ul>
<li>异步定时方式<ul>
<li>不互锁方式</li>
<li>半互锁方式</li>
<li>全互锁方式</li>
</ul>
</li>
</ul>
<h3 id="8-4-总线标准"><a href="#8-4-总线标准" class="headerlink" title="8.4 总线标准"></a>8.4 总线标准</h3><ul>
<li>ISA【并行】</li>
<li>EISA【并行】</li>
<li>VESA</li>
<li>PCI</li>
<li>PCI-Express【PCI-E】</li>
<li>AGP</li>
<li>RS-232C</li>
<li>USB</li>
<li>PCMCIA</li>
<li>IDE</li>
<li>SCSI</li>
<li>SATA</li>
</ul>
<h2 id="9-输入-x2F-输出系统"><a href="#9-输入-x2F-输出系统" class="headerlink" title="9. 输入&#x2F;输出系统"></a>9. 输入&#x2F;输出系统</h2><blockquote>
<p>输入输出是以主机为中心</p>
</blockquote>
<h3 id="9-1-基本属性"><a href="#9-1-基本属性" class="headerlink" title="9.1 基本属性"></a>9.1 基本属性</h3><ul>
<li>外部设备</li>
<li>接口</li>
<li>输入设备</li>
<li>输出设备</li>
<li>外存设备</li>
<li>I&#x2F;O软件</li>
<li>I&#x2F;O硬件</li>
</ul>
<h3 id="9-2-I-x2F-O控制方式"><a href="#9-2-I-x2F-O控制方式" class="headerlink" title="9.2 I&#x2F;O控制方式"></a>9.2 I&#x2F;O控制方式</h3><ul>
<li>程序查询方式</li>
<li>程序中断方式</li>
<li>DMA方式【直接内存访问】</li>
<li>通道方式</li>
</ul>
<h3 id="9-3-外部设备"><a href="#9-3-外部设备" class="headerlink" title="9.3 外部设备"></a>9.3 外部设备</h3><ul>
<li><p>输入设备</p>
<ul>
<li>键盘</li>
<li>鼠标</li>
</ul>
</li>
<li><p>输出设备</p>
<ul>
<li><p>显示器</p>
<ul>
<li>屏幕大小</li>
<li>分辨率</li>
<li>灰度级</li>
<li>刷新</li>
<li>刷新频率</li>
<li>显示存储器【VRAM】<ul>
<li>阴极射线管（CRT）显示器<ul>
<li>字符显示器</li>
<li>图形显示器</li>
</ul>
</li>
<li>液晶显示器【LCD】</li>
<li>LED（发光二极管）显示器</li>
</ul>
</li>
</ul>
</li>
<li><p>打印机</p>
<ul>
<li>针式打印机</li>
<li>喷黑式打印机</li>
<li>激光打印机</li>
</ul>
</li>
<li><p>外存储器</p>
<ul>
<li>磁盘存储器</li>
<li>磁盘阵列<ul>
<li>RAID0</li>
<li>RAID1</li>
<li>RAID2</li>
<li>RAID3</li>
<li>RAID4</li>
<li>RAID5</li>
</ul>
</li>
<li>光盘存储器<ul>
<li>CD-ROM</li>
<li>CD-R</li>
<li>CD-RW</li>
<li>DVD-ROM</li>
</ul>
</li>
<li>固态硬盘<ul>
<li>Flash Memory</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-4-I-x2F-O接口"><a href="#9-4-I-x2F-O接口" class="headerlink" title="9.4 I&#x2F;O接口"></a>9.4 I&#x2F;O接口</h3><ul>
<li><p>I&#x2F;O接口的功能</p>
<ul>
<li>实现主机和外设的通信联络控制</li>
<li>进行地址译码和设备选择</li>
<li>实现数据缓冲</li>
<li>信号格式的转换</li>
<li>传送控制信号和状态信息</li>
</ul>
</li>
<li><p>I&#x2F;O接口的基本结构</p>
<blockquote>
<p>接口和端口不是同一个概念，端口是指接口电路中可以进行读&#x2F;写的寄存器，若干端口加上相应的控制逻辑才可以组成接口</p>
</blockquote>
</li>
<li><p>I&#x2F;O接口的类型</p>
<ul>
<li>按照数据传送方式<ul>
<li>并行接口【一个字节或一个字的所有位】</li>
<li>串行接口【一位一位】</li>
</ul>
</li>
<li>按照主机访问I&#x2F;O设备的控制方式<ul>
<li>程序查询接口</li>
<li>中断接口</li>
<li>DMA接口</li>
</ul>
</li>
<li>按功能选择的灵活性<ul>
<li>可编程接口</li>
<li>不可编程接口</li>
</ul>
</li>
</ul>
</li>
<li><p>I&#x2F;O端口及其编址</p>
<ul>
<li>统一编址【存储器映射方式】</li>
<li>独立编址【I&#x2F;O映射方式】</li>
</ul>
</li>
</ul>
<h3 id="9-5-I-x2F-O方式"><a href="#9-5-I-x2F-O方式" class="headerlink" title="9.5 I&#x2F;O方式"></a>9.5 I&#x2F;O方式</h3><ul>
<li><p>程序查询方式</p>
<ul>
<li>CPU执行初始化程序，并预置传送参数</li>
<li>向I&#x2F;O接口发出命令字，启动I&#x2F;o设备</li>
<li>向外设接口读取其状态信息</li>
<li>CPU不断查询I&#x2F;O设备状态，直到外设准备就绪</li>
<li>传送一次数据</li>
<li>修改地址和计数器参数</li>
<li>判断传送是否结束，若未结束转第三步，直至计数器位为0</li>
</ul>
</li>
<li><p>程序中断方式</p>
<ul>
<li>异常和中断<ul>
<li>异常<ul>
<li>故障</li>
<li>自陷</li>
<li>终止</li>
</ul>
</li>
<li>外部中断</li>
</ul>
</li>
</ul>
</li>
<li><p>中断的作用</p>
<ul>
<li>实现CPU与I&#x2F;O设备的并行工作</li>
<li>处理硬件故障和软件错误</li>
<li>实现人机交互，用户干预机器需要用到中断系统</li>
<li>实现多道程序，分时操作，多道程序的切换需借助于中断系统</li>
<li>实时处理需要借助中断系统来实现快速响应</li>
<li>实现应用程序和操作系统（管态程序）的切换，也称为“软中断”</li>
<li>多处理器系统中各处理器之间的信息交流和任务切换</li>
</ul>
</li>
<li><p>中断的工作流程</p>
<ul>
<li>中断请求</li>
</ul>
<blockquote>
<p>内中断皆为不可屏蔽中断</p>
</blockquote>
<ul>
<li>中断判优</li>
<li>CPU响应中断的条件<ul>
<li>中断源有中断请求</li>
<li>CPU允许中断及断开中断</li>
<li>一条指令执行完毕,且没有更紧迫的任务</li>
</ul>
</li>
<li>中断响应<ul>
<li>关中断</li>
<li>保存断点</li>
<li>引出中断服务程序</li>
</ul>
</li>
<li>中断向量</li>
<li>中断处理过程<ul>
<li>关中断</li>
<li>保存断点</li>
<li>引出中断服务程序</li>
<li>保存现场和屏蔽字</li>
<li>开中断</li>
<li>执行中断服务程序</li>
<li>关中断</li>
<li>恢复现场和屏蔽字</li>
<li>开中断\中断返回</li>
</ul>
</li>
</ul>
</li>
<li><p>多重中断和中断屏蔽技术</p>
<ul>
<li>在中断服务程序中提前设置开中断指令</li>
<li>优先级别高的中断源有权中断优先级别低的中断源</li>
</ul>
</li>
</ul>
<h3 id="9-6-DMA方式"><a href="#9-6-DMA方式" class="headerlink" title="9.6 DMA方式"></a>9.6 DMA方式</h3><ul>
<li>DMA方式特点<ul>
<li>它使主存和CPU的固定联系脱钩,主存既可被CPU访问,又可以被外设访问</li>
<li>在数据块传送时,主存地址的确定,传送数据的计数等都由硬件电路直接实现</li>
<li>主存中要开辟专用缓冲区,及时供给和接收外设的数据</li>
<li>DMA传送速度快,CPU和外设并行工作,提高了系统效率</li>
<li>DMA在传送开始前要通过程序进行预处理,结束后要通过中断方式进行后处理</li>
</ul>
</li>
<li>DMA控制器的组成<ul>
<li>主存地址计数器</li>
<li>传送长度计数器</li>
<li>数据缓冲寄存器</li>
<li>DMA请求触发器</li>
<li>控制&#x2F;状态逻辑</li>
<li>中断机构</li>
</ul>
</li>
<li>DMA的传送方式<ul>
<li>停止CPU访问</li>
<li>周期挪用 [周期窃取]</li>
<li>DMA与CPU交替访存</li>
</ul>
</li>
<li>DMA传送过程<ul>
<li>预处理</li>
<li>数据传送</li>
<li>后处理</li>
</ul>
</li>
</ul>
<h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><p>本次对于计算机组成原理有了较深刻的理解,对于以前一些不懂的知识有了融汇贯通的感觉,同时也明白自己的渺小.</p>
]]></content>
      <tags>
        <tag>思想</tag>
      </tags>
  </entry>
</search>
